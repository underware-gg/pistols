#!/usr/bin/env node

//------------------------------------
// run with...
//
// cd sdk
// turbo build && pnpm generate-assets
//
//------------------------------------

const fs = require("fs");
const path = require("path");
const { Buffer } = require("node:buffer");

function getFolderFilesRecursively(folder, extensions = [], includeSubfolders = false) {
  let files = [];
  fs.readdirSync(folder).forEach(File => {
    const absPath = path.join(folder, File);
    if (fs.statSync(absPath).isDirectory()) {
      if (includeSubfolders) {
        files = files.concat(getFolderFilesRecursively(absPath, extensions, includeSubfolders));
      }
    } else if (
      extensions.length === 0 ||
      extensions.some(ext => absPath.endsWith(ext))
    ) {
      files.push(absPath);
    }
  });
  return files.sort((a, b) => a.localeCompare(b));
}

//----------------------
// Execution
//
console.log("executing [generateTokenAssets.cjs]...", process.argv)

const sources = [
  {
    source_path: '../../client/public/profiles',
    out_file: '../src/games/pistols/tokens/assets/generated/profiles.tsx',
    include_subfolders: true,
  },
  {
    source_path: '../../client/public/textures/cards',
    out_file: '../src/games/pistols/tokens/assets/generated/cards.tsx',
    include_subfolders: false,
  },
  {
    source_path: '../../client/public/images/ui',
    out_file: '../src/games/pistols/tokens/assets/generated/ui.tsx',
    include_subfolders: false,
  },
];

sources.forEach(source => {
  const srcPath = path.resolve(__dirname, source.source_path);
  const outPath = path.resolve(__dirname, source.out_file);
  const encodedPath = outPath.slice(0, outPath.lastIndexOf("/")) + '/encoded';
  // console.log(`SRC PATH:`, srcPath);
  // console.log(`OUT PATH:`, outPath);
  // console.log(`ENCODED PATH:`, encodedPath);

  let assetsNames = [];

  let files = getFolderFilesRecursively(srcPath, ['.png', '.jpg'], source.include_subfolders);
  files.forEach(async filePath => {
    const fileContents = fs.readFileSync(filePath);
    let ix = filePath.indexOf('/public/') + '/public'.length;
    let name = filePath.slice(ix).replaceAll('/', '_').replaceAll('.', '_');
    // console.log(`FILE:`, filePath, name);
    const encoded = Buffer.from(fileContents).toString('base64');
    assetsNames.push(name);
    //
    // create encoded asset file
    let assetFileContents = '';
    assetFileContents += `/* Autogenerated file. Do not edit manually. */\n`;
    assetFileContents += `// encoded from: ${filePath}\n`;
    assetFileContents += `\n`;
    assetFileContents += `const ${name} = "${encoded}";\n`;
    assetFileContents += `\n`;
    assetFileContents += `export default ${name};\n`;
    const tsAssetFilePath = path.resolve(__dirname, encodedPath + `/${name}.ts`);
    fs.writeFileSync(tsAssetFilePath, assetFileContents);

    // save asset file as text
    // const txtAssetFilePath = path.resolve(__dirname, encodedPath + `/${name}.base64.txt`);
    // fs.writeFileSync(txtAssetFilePath, encoded);
  })
  

  // build file contents
  let fileContents = '';
  // fileContents += `//@ts-nocheck\n`;
  fileContents += `/* Autogenerated file. Do not edit manually. */\n`;
  fileContents += `// from: ${source.source_path}\n`;
  fileContents += `import { AssetFolder } from '../assets';\n`;
  fileContents += `\n`;
  fileContents += `export const assets: AssetFolder = {\n`;
  assetsNames.forEach(name => {
    // fileContents += `  //@ts-ignore\n`;
    fileContents += `  ${name}: async () => (await import('./encoded/${name}')).default,\n`;
  });
  fileContents += `}\n`;
  
  // save file
  fs.writeFile(outPath, fileContents, (err) => {
    if (err) {
      console.error("ERROR: error writing file:", err);
    } else {
      console.log("Token assets file generated:", outPath);
    }
  });
})


