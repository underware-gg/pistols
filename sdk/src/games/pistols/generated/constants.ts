/* Autogenerated file. Do not edit manually. */


//----------------------------------
// interfaces
//
export const INTERFACE_DESCRIPTIONS: any = {
  // from: ../dojo/src/systems/bank.cairo
  IBankPublic: {
    sponsor_duelists: 'Sponsor duelist starter packs with $LORDS',
    sponsor_season: 'Sponsor the current season with $LORDS',
    sponsor_tournament: 'Sponsor a tournament with $LORDS',
    collect_season: 'Close the current season and start the next one',
  },
  // from: ../dojo/src/systems/game.cairo
  IGame: {
    commit_moves: 'Commit moves of a Duelist in a Duel',
    reveal_moves: 'Reveal moves of a Duelist in a Duel',
    collect_duel: 'Close expired duels',
    clear_call_to_action: 'Clear the required action call for a duelist',
  },
  // from: ../dojo/src/systems/tokens/duel_token.cairo
  IDuelTokenPublic: {
    create_duel: 'Create a Duel, mint its token',
    reply_duel: 'Reply to a Duel (accept or reject)',
  },
  // from: ../dojo/src/systems/tokens/duelist_token.cairo
  IDuelistTokenPublic: {
    poke: 'Reactivates an inactive Duelist',
    sacrifice: 'Sacrifices a Duelist',
    memorialize: 'Memorializes a Duelist',
  },
  // from: ../dojo/src/systems/tokens/pack_token.cairo
  IPackTokenPublic: {
    claim_starter_pack: 'Claim the starter pack, mint Duelists',
    claim_gift: 'Claim gift pack, if available',
    purchase: 'Purchase a closed pack',
    open: 'Open a pack, mint its contents',
  },
  // from: ../dojo/src/systems/tutorial.cairo
  ITutorial: {
    create_tutorial: 'Initializes a turorial level',
    commit_moves: 'Commit moves of a Duelist in a tutorial level',
    reveal_moves: 'Reveal moves of a Duelist in a tutorial level',
  },
}

//----------------------------------
// helpers
//
const _indexOrUndefined = (v: number) => (v >= 0 ? v : undefined);

//----------------------------------
// enums
//

// from: ../dojo/src/interfaces/vrf.cairo
export enum Source {
  Nonce = 'Nonce', // 0
  Salt = 'Salt', // 1
};
export const getSourceValue = (name: Source): number | undefined => _indexOrUndefined(Object.keys(Source).indexOf(name));
export const getSourceFromValue = (value: number): Source | undefined => Object.keys(Source)[value] as Source;
export const getSourceMap = (): Record<Source, number> => Object.keys(Source).reduce((acc, v, index) => { acc[v as Source] = index; return acc; }, {} as Record<Source, number>);

// from: ../dojo/src/libs/tut.cairo
export enum TutorialLevel {
  Undefined = 'Undefined', // 0
  Level1 = 'Level1', // 1
  Level2 = 'Level2', // 2
};
export const getTutorialLevelValue = (name: TutorialLevel): number | undefined => _indexOrUndefined(Object.keys(TutorialLevel).indexOf(name));
export const getTutorialLevelFromValue = (value: number): TutorialLevel | undefined => Object.keys(TutorialLevel)[value] as TutorialLevel;
export const getTutorialLevelMap = (): Record<TutorialLevel, number> => Object.keys(TutorialLevel).reduce((acc, v, index) => { acc[v as TutorialLevel] = index; return acc; }, {} as Record<TutorialLevel, number>);

// from: ../dojo/src/models/challenge.cairo
export enum DuelType {
  Undefined = 'Undefined', // 0
  Seasonal = 'Seasonal', // 1
  Tournament = 'Tournament', // 2
  Tutorial = 'Tutorial', // 3
  Practice = 'Practice', // 4
};
export const getDuelTypeValue = (name: DuelType): number | undefined => _indexOrUndefined(Object.keys(DuelType).indexOf(name));
export const getDuelTypeFromValue = (value: number): DuelType | undefined => Object.keys(DuelType)[value] as DuelType;
export const getDuelTypeMap = (): Record<DuelType, number> => Object.keys(DuelType).reduce((acc, v, index) => { acc[v as DuelType] = index; return acc; }, {} as Record<DuelType, number>);

// from: ../dojo/src/models/duelist.cairo
export enum CauseOfDeath {
  None = 'None', // 0
  Duelling = 'Duelling', // 1
  Memorize = 'Memorize', // 2
  Sacrifice = 'Sacrifice', // 3
  Forsaken = 'Forsaken', // 4
};
export const getCauseOfDeathValue = (name: CauseOfDeath): number | undefined => _indexOrUndefined(Object.keys(CauseOfDeath).indexOf(name));
export const getCauseOfDeathFromValue = (value: number): CauseOfDeath | undefined => Object.keys(CauseOfDeath)[value] as CauseOfDeath;
export const getCauseOfDeathMap = (): Record<CauseOfDeath, number> => Object.keys(CauseOfDeath).reduce((acc, v, index) => { acc[v as CauseOfDeath] = index; return acc; }, {} as Record<CauseOfDeath, number>);

// from: ../dojo/src/models/duelist.cairo
export enum Archetype {
  Undefined = 'Undefined', // 0
  Villainous = 'Villainous', // 1
  Trickster = 'Trickster', // 2
  Honourable = 'Honourable', // 3
};
export const getArchetypeValue = (name: Archetype): number | undefined => _indexOrUndefined(Object.keys(Archetype).indexOf(name));
export const getArchetypeFromValue = (value: number): Archetype | undefined => Object.keys(Archetype)[value] as Archetype;
export const getArchetypeMap = (): Record<Archetype, number> => Object.keys(Archetype).reduce((acc, v, index) => { acc[v as Archetype] = index; return acc; }, {} as Record<Archetype, number>);

// from: ../dojo/src/models/events.cairo
export enum Activity {
  Undefined = 'Undefined', // 0
  TutorialFinished = 'TutorialFinished', // 1
  PackStarter = 'PackStarter', // 2
  PackPurchased = 'PackPurchased', // 3
  PackOpened = 'PackOpened', // 4
  DuelistSpawned = 'DuelistSpawned', // 5
  DuelistDied = 'DuelistDied', // 6
  ChallengeCreated = 'ChallengeCreated', // 7
  ChallengeCanceled = 'ChallengeCanceled', // 8
  ChallengeReplied = 'ChallengeReplied', // 9
  MovesCommitted = 'MovesCommitted', // 10
  MovesRevealed = 'MovesRevealed', // 11
  PlayerTimedOut = 'PlayerTimedOut', // 12
  ChallengeResolved = 'ChallengeResolved', // 13
  ChallengeDraw = 'ChallengeDraw', // 14
};
export const getActivityValue = (name: Activity): number | undefined => _indexOrUndefined(Object.keys(Activity).indexOf(name));
export const getActivityFromValue = (value: number): Activity | undefined => Object.keys(Activity)[value] as Activity;
export const getActivityMap = (): Record<Activity, number> => Object.keys(Activity).reduce((acc, v, index) => { acc[v as Activity] = index; return acc; }, {} as Record<Activity, number>);

// from: ../dojo/src/models/pack.cairo
export enum PackType {
  Unknown = 'Unknown', // 0
  StarterPack = 'StarterPack', // 1
  GenesisDuelists5x = 'GenesisDuelists5x', // 2
};
export const getPackTypeValue = (name: PackType): number | undefined => _indexOrUndefined(Object.keys(PackType).indexOf(name));
export const getPackTypeFromValue = (value: number): PackType | undefined => Object.keys(PackType)[value] as PackType;
export const getPackTypeMap = (): Record<PackType, number> => Object.keys(PackType).reduce((acc, v, index) => { acc[v as PackType] = index; return acc; }, {} as Record<PackType, number>);

// from: ../dojo/src/models/pool.cairo
export enum PoolType {
  Undefined = 'Undefined', // 0
  Purchases = 'Purchases', // 1
  FamePeg = 'FamePeg', // 2
  Season = 'Season', // 3
  Tournament = 'Tournament', // 4
  Sacrifice = 'Sacrifice', // 5
};
export const getPoolTypeValue = (name: PoolType): number | undefined => _indexOrUndefined(Object.keys(PoolType).indexOf(name));
export const getPoolTypeFromValue = (value: number): PoolType | undefined => Object.keys(PoolType)[value] as PoolType;
export const getPoolTypeMap = (): Record<PoolType, number> => Object.keys(PoolType).reduce((acc, v, index) => { acc[v as PoolType] = index; return acc; }, {} as Record<PoolType, number>);

// from: ../dojo/src/models/pool.cairo
export enum ReleaseReason {
  Undefined = 'Undefined', // 0
  FameLostToCreator = 'FameLostToCreator', // 1
  FameLostToDeveloper = 'FameLostToDeveloper', // 2
  SacrificedToDeveloper = 'SacrificedToDeveloper', // 3
  LeaderboardPrize = 'LeaderboardPrize', // 4
};
export const getReleaseReasonValue = (name: ReleaseReason): number | undefined => _indexOrUndefined(Object.keys(ReleaseReason).indexOf(name));
export const getReleaseReasonFromValue = (value: number): ReleaseReason | undefined => Object.keys(ReleaseReason)[value] as ReleaseReason;
export const getReleaseReasonMap = (): Record<ReleaseReason, number> => Object.keys(ReleaseReason).reduce((acc, v, index) => { acc[v as ReleaseReason] = index; return acc; }, {} as Record<ReleaseReason, number>);

// from: ../dojo/src/models/season.cairo
export enum SeasonPhase {
  Undefined = 'Undefined', // 0
  InProgress = 'InProgress', // 1
  Ended = 'Ended', // 2
};
export const getSeasonPhaseValue = (name: SeasonPhase): number | undefined => _indexOrUndefined(Object.keys(SeasonPhase).indexOf(name));
export const getSeasonPhaseFromValue = (value: number): SeasonPhase | undefined => Object.keys(SeasonPhase)[value] as SeasonPhase;
export const getSeasonPhaseMap = (): Record<SeasonPhase, number> => Object.keys(SeasonPhase).reduce((acc, v, index) => { acc[v as SeasonPhase] = index; return acc; }, {} as Record<SeasonPhase, number>);

// from: ../dojo/src/models/tournament.cairo
export enum TournamentState {
  Undefined = 'Undefined', // 0
  InProgress = 'InProgress', // 1
  Finished = 'Finished', // 2
};
export const getTournamentStateValue = (name: TournamentState): number | undefined => _indexOrUndefined(Object.keys(TournamentState).indexOf(name));
export const getTournamentStateFromValue = (value: number): TournamentState | undefined => Object.keys(TournamentState)[value] as TournamentState;
export const getTournamentStateMap = (): Record<TournamentState, number> => Object.keys(TournamentState).reduce((acc, v, index) => { acc[v as TournamentState] = index; return acc; }, {} as Record<TournamentState, number>);

// from: ../dojo/src/models/tournament.cairo
export enum TournamentType {
  Undefined = 'Undefined', // 0
  LastManStanding = 'LastManStanding', // 1
  BestOfThree = 'BestOfThree', // 2
};
export const getTournamentTypeValue = (name: TournamentType): number | undefined => _indexOrUndefined(Object.keys(TournamentType).indexOf(name));
export const getTournamentTypeFromValue = (value: number): TournamentType | undefined => Object.keys(TournamentType)[value] as TournamentType;
export const getTournamentTypeMap = (): Record<TournamentType, number> => Object.keys(TournamentType).reduce((acc, v, index) => { acc[v as TournamentType] = index; return acc; }, {} as Record<TournamentType, number>);

// from: ../dojo/src/types/boolean.cairo
export enum Boolean {
  Undefined = 'Undefined', // 0
  True = 'True', // 1
  False = 'False', // 2
};
export const getBooleanValue = (name: Boolean): number | undefined => _indexOrUndefined(Object.keys(Boolean).indexOf(name));
export const getBooleanFromValue = (value: number): Boolean | undefined => Object.keys(Boolean)[value] as Boolean;
export const getBooleanMap = (): Record<Boolean, number> => Object.keys(Boolean).reduce((acc, v, index) => { acc[v as Boolean] = index; return acc; }, {} as Record<Boolean, number>);

// from: ../dojo/src/types/cards/blades.cairo
export enum BladesCard {
  None = 'None', // 0
  Seppuku = 'Seppuku', // 1
  PocketPistol = 'PocketPistol', // 2
  Behead = 'Behead', // 3
  Grapple = 'Grapple', // 4
};
export const getBladesCardValue = (name: BladesCard): number | undefined => _indexOrUndefined(Object.keys(BladesCard).indexOf(name));
export const getBladesCardFromValue = (value: number): BladesCard | undefined => Object.keys(BladesCard)[value] as BladesCard;
export const getBladesCardMap = (): Record<BladesCard, number> => Object.keys(BladesCard).reduce((acc, v, index) => { acc[v as BladesCard] = index; return acc; }, {} as Record<BladesCard, number>);

// from: ../dojo/src/types/cards/cards.cairo
export enum Rarity {
  None = 'None', // 0
  Common = 'Common', // 1
  Uncommon = 'Uncommon', // 2
  Special = 'Special', // 3
};
export const getRarityValue = (name: Rarity): number | undefined => _indexOrUndefined(Object.keys(Rarity).indexOf(name));
export const getRarityFromValue = (value: number): Rarity | undefined => Object.keys(Rarity)[value] as Rarity;
export const getRarityMap = (): Record<Rarity, number> => Object.keys(Rarity).reduce((acc, v, index) => { acc[v as Rarity] = index; return acc; }, {} as Record<Rarity, number>);

// from: ../dojo/src/types/cards/deck.cairo
export enum DeckType {
  None = 'None', // 0
  Classic = 'Classic', // 1
  PacesOnly = 'PacesOnly', // 2
};
export const getDeckTypeValue = (name: DeckType): number | undefined => _indexOrUndefined(Object.keys(DeckType).indexOf(name));
export const getDeckTypeFromValue = (value: number): DeckType | undefined => Object.keys(DeckType)[value] as DeckType;
export const getDeckTypeMap = (): Record<DeckType, number> => Object.keys(DeckType).reduce((acc, v, index) => { acc[v as DeckType] = index; return acc; }, {} as Record<DeckType, number>);

// from: ../dojo/src/types/cards/env.cairo
export enum EnvCard {
  None = 'None', // 0
  DamageUp = 'DamageUp', // 1
  DamageDown = 'DamageDown', // 2
  ChancesUp = 'ChancesUp', // 3
  ChancesDown = 'ChancesDown', // 4
  DoubleDamageUp = 'DoubleDamageUp', // 5
  DoubleChancesUp = 'DoubleChancesUp', // 6
  SpecialAllShotsHit = 'SpecialAllShotsHit', // 7
  SpecialAllShotsMiss = 'SpecialAllShotsMiss', // 8
  SpecialDoubleTactics = 'SpecialDoubleTactics', // 9
  SpecialNoTactics = 'SpecialNoTactics', // 10
};
export const getEnvCardValue = (name: EnvCard): number | undefined => _indexOrUndefined(Object.keys(EnvCard).indexOf(name));
export const getEnvCardFromValue = (value: number): EnvCard | undefined => Object.keys(EnvCard)[value] as EnvCard;
export const getEnvCardMap = (): Record<EnvCard, number> => Object.keys(EnvCard).reduce((acc, v, index) => { acc[v as EnvCard] = index; return acc; }, {} as Record<EnvCard, number>);

// from: ../dojo/src/types/cards/hand.cairo
export enum FinalBlow {
  Undefined = 'Undefined', // 0
  Paces = 'Paces', // 1
  Blades = 'Blades', // 2
  Forsaken = 'Forsaken', // 3
  Unpaired = 'Unpaired', // 4
};
export const getFinalBlowValue = (name: FinalBlow): number | undefined => _indexOrUndefined(Object.keys(FinalBlow).indexOf(name));
export const getFinalBlowFromValue = (value: number): FinalBlow | undefined => Object.keys(FinalBlow)[value] as FinalBlow;
export const getFinalBlowMap = (): Record<FinalBlow, number> => Object.keys(FinalBlow).reduce((acc, v, index) => { acc[v as FinalBlow] = index; return acc; }, {} as Record<FinalBlow, number>);

// from: ../dojo/src/types/cards/paces.cairo
export enum PacesCard {
  None = 'None', // 0
  Paces1 = 'Paces1', // 1
  Paces2 = 'Paces2', // 2
  Paces3 = 'Paces3', // 3
  Paces4 = 'Paces4', // 4
  Paces5 = 'Paces5', // 5
  Paces6 = 'Paces6', // 6
  Paces7 = 'Paces7', // 7
  Paces8 = 'Paces8', // 8
  Paces9 = 'Paces9', // 9
  Paces10 = 'Paces10', // 10
};
export const getPacesCardValue = (name: PacesCard): number | undefined => _indexOrUndefined(Object.keys(PacesCard).indexOf(name));
export const getPacesCardFromValue = (value: number): PacesCard | undefined => Object.keys(PacesCard)[value] as PacesCard;
export const getPacesCardMap = (): Record<PacesCard, number> => Object.keys(PacesCard).reduce((acc, v, index) => { acc[v as PacesCard] = index; return acc; }, {} as Record<PacesCard, number>);

// from: ../dojo/src/types/cards/tactics.cairo
export enum TacticsCard {
  None = 'None', // 0
  Insult = 'Insult', // 1
  CoinToss = 'CoinToss', // 2
  Vengeful = 'Vengeful', // 3
  ThickCoat = 'ThickCoat', // 4
  Reversal = 'Reversal', // 5
  Bananas = 'Bananas', // 6
};
export const getTacticsCardValue = (name: TacticsCard): number | undefined => _indexOrUndefined(Object.keys(TacticsCard).indexOf(name));
export const getTacticsCardFromValue = (value: number): TacticsCard | undefined => Object.keys(TacticsCard)[value] as TacticsCard;
export const getTacticsCardMap = (): Record<TacticsCard, number> => Object.keys(TacticsCard).reduce((acc, v, index) => { acc[v as TacticsCard] = index; return acc; }, {} as Record<TacticsCard, number>);

// from: ../dojo/src/types/challenge_state.cairo
export enum ChallengeState {
  Null = 'Null', // 0
  Awaiting = 'Awaiting', // 1
  Withdrawn = 'Withdrawn', // 2
  Refused = 'Refused', // 3
  Expired = 'Expired', // 4
  InProgress = 'InProgress', // 5
  Resolved = 'Resolved', // 6
  Draw = 'Draw', // 7
};
export const getChallengeStateValue = (name: ChallengeState): number | undefined => _indexOrUndefined(Object.keys(ChallengeState).indexOf(name));
export const getChallengeStateFromValue = (value: number): ChallengeState | undefined => Object.keys(ChallengeState)[value] as ChallengeState;
export const getChallengeStateMap = (): Record<ChallengeState, number> => Object.keys(ChallengeState).reduce((acc, v, index) => { acc[v as ChallengeState] = index; return acc; }, {} as Record<ChallengeState, number>);

// from: ../dojo/src/types/duel_progress.cairo
export enum DuelistDrawnCard {
  None = 'None', // 0
  Fire = 'Fire', // 1
  Dodge = 'Dodge', // 2
  Blades = 'Blades', // 3
};
export const getDuelistDrawnCardValue = (name: DuelistDrawnCard): number | undefined => _indexOrUndefined(Object.keys(DuelistDrawnCard).indexOf(name));
export const getDuelistDrawnCardFromValue = (value: number): DuelistDrawnCard | undefined => Object.keys(DuelistDrawnCard)[value] as DuelistDrawnCard;
export const getDuelistDrawnCardMap = (): Record<DuelistDrawnCard, number> => Object.keys(DuelistDrawnCard).reduce((acc, v, index) => { acc[v as DuelistDrawnCard] = index; return acc; }, {} as Record<DuelistDrawnCard, number>);

// from: ../dojo/src/types/duelist_profile.cairo
export enum DuelistProfile {
  Undefined = 'Undefined', // 0
  Character = 'Character', // 1
  Bot = 'Bot', // 2
  Genesis = 'Genesis', // 3
};
export const getDuelistProfileValue = (name: DuelistProfile): number | undefined => _indexOrUndefined(Object.keys(DuelistProfile).indexOf(name));
export const getDuelistProfileFromValue = (value: number): DuelistProfile | undefined => Object.keys(DuelistProfile)[value] as DuelistProfile;
export const getDuelistProfileMap = (): Record<DuelistProfile, number> => Object.keys(DuelistProfile).reduce((acc, v, index) => { acc[v as DuelistProfile] = index; return acc; }, {} as Record<DuelistProfile, number>);

// from: ../dojo/src/types/duelist_profile.cairo
export enum CharacterKey {
  Unknown = 'Unknown', // 0
  Bartender = 'Bartender', // 1
  Drunkard = 'Drunkard', // 2
  Devil = 'Devil', // 3
  Player = 'Player', // 4
};
export const getCharacterKeyValue = (name: CharacterKey): number | undefined => _indexOrUndefined(Object.keys(CharacterKey).indexOf(name));
export const getCharacterKeyFromValue = (value: number): CharacterKey | undefined => Object.keys(CharacterKey)[value] as CharacterKey;
export const getCharacterKeyMap = (): Record<CharacterKey, number> => Object.keys(CharacterKey).reduce((acc, v, index) => { acc[v as CharacterKey] = index; return acc; }, {} as Record<CharacterKey, number>);

// from: ../dojo/src/types/duelist_profile.cairo
export enum BotKey {
  Unknown = 'Unknown', // 0
  TinMan = 'TinMan', // 1
  Scarecrow = 'Scarecrow', // 2
  Leon = 'Leon', // 3
};
export const getBotKeyValue = (name: BotKey): number | undefined => _indexOrUndefined(Object.keys(BotKey).indexOf(name));
export const getBotKeyFromValue = (value: number): BotKey | undefined => Object.keys(BotKey)[value] as BotKey;
export const getBotKeyMap = (): Record<BotKey, number> => Object.keys(BotKey).reduce((acc, v, index) => { acc[v as BotKey] = index; return acc; }, {} as Record<BotKey, number>);

// from: ../dojo/src/types/duelist_profile.cairo
export enum GenesisKey {
  Unknown = 'Unknown', // 0
  SerWalker = 'SerWalker', // 1
  LadyVengeance = 'LadyVengeance', // 2
  Duke = 'Duke', // 3
  Duella = 'Duella', // 4
  Jameson = 'Jameson', // 5
  Misty = 'Misty', // 6
  Karaku = 'Karaku', // 7
  Kenzu = 'Kenzu', // 8
  Pilgrim = 'Pilgrim', // 9
  Jack = 'Jack', // 10
  Pops = 'Pops', // 11
  NynJah = 'NynJah', // 12
  Thrak = 'Thrak', // 13
  Bloberto = 'Bloberto', // 14
  Squiddo = 'Squiddo', // 15
  SlenderDuck = 'SlenderDuck', // 16
  Breadman = 'Breadman', // 17
  Groggus = 'Groggus', // 18
  Pistolopher = 'Pistolopher', // 19
  Secreto = 'Secreto', // 20
  ShadowMare = 'ShadowMare', // 21
  Fjolnir = 'Fjolnir', // 22
  ChimpDylan = 'ChimpDylan', // 23
  Hinata = 'Hinata', // 24
  HelixVex = 'HelixVex', // 25
  BuccaneerJames = 'BuccaneerJames', // 26
  TheSensei = 'TheSensei', // 27
  SenseiTarrence = 'SenseiTarrence', // 28
  ThePainter = 'ThePainter', // 29
  Ashe = 'Ashe', // 30
  SerGogi = 'SerGogi', // 31
  TheSurvivor = 'TheSurvivor', // 32
  TheFrenchman = 'TheFrenchman', // 33
  SerFocger = 'SerFocger', // 34
  SillySosij = 'SillySosij', // 35
  BloodBeard = 'BloodBeard', // 36
  Fredison = 'Fredison', // 37
  TheBard = 'TheBard', // 38
  Ponzimancer = 'Ponzimancer', // 39
  DealerTani = 'DealerTani', // 40
  SerRichard = 'SerRichard', // 41
  Recipromancer = 'Recipromancer', // 42
  Mataleone = 'Mataleone', // 43
  FortunaRegem = 'FortunaRegem', // 44
  Amaro = 'Amaro', // 45
  Mononoke = 'Mononoke', // 46
  Parsa = 'Parsa', // 47
  Jubilee = 'Jubilee', // 48
  LadyOfCrows = 'LadyOfCrows', // 49
  BananaDuke = 'BananaDuke', // 50
  LordGladstone = 'LordGladstone', // 51
  LadyStrokes = 'LadyStrokes', // 52
  Bliss = 'Bliss', // 53
  StormMirror = 'StormMirror', // 54
  Aldreda = 'Aldreda', // 55
  Petronella = 'Petronella', // 56
  SeraphinaRose = 'SeraphinaRose', // 57
  LucienDeSombrel = 'LucienDeSombrel', // 58
  FyernVirelock = 'FyernVirelock', // 59
  Noir = 'Noir', // 60
  QueenAce = 'QueenAce', // 61
  JoshPeel = 'JoshPeel', // 62
  IronHandRogan = 'IronHandRogan', // 63
  GoodPupStarky = 'GoodPupStarky', // 64
  ImyaSuspect = 'ImyaSuspect', // 65
  TheAlchemist = 'TheAlchemist', // 66
  PonziusPilate = 'PonziusPilate', // 67
  MistressNoodle = 'MistressNoodle', // 68
  MasterOfSecrets = 'MasterOfSecrets', // 69
};
export const getGenesisKeyValue = (name: GenesisKey): number | undefined => _indexOrUndefined(Object.keys(GenesisKey).indexOf(name));
export const getGenesisKeyFromValue = (value: number): GenesisKey | undefined => Object.keys(GenesisKey)[value] as GenesisKey;
export const getGenesisKeyMap = (): Record<GenesisKey, number> => Object.keys(GenesisKey).reduce((acc, v, index) => { acc[v as GenesisKey] = index; return acc; }, {} as Record<GenesisKey, number>);

// from: ../dojo/src/types/premise.cairo
export enum Premise {
  Undefined = 'Undefined', // 0
  Matter = 'Matter', // 1
  Debt = 'Debt', // 2
  Dispute = 'Dispute', // 3
  Honour = 'Honour', // 4
  Hatred = 'Hatred', // 5
  Blood = 'Blood', // 6
  Nothing = 'Nothing', // 7
  Tournament = 'Tournament', // 8
  Treaty = 'Treaty', // 9
  Lesson = 'Lesson', // 10
};
export const getPremiseValue = (name: Premise): number | undefined => _indexOrUndefined(Object.keys(Premise).indexOf(name));
export const getPremiseFromValue = (value: number): Premise | undefined => Object.keys(Premise)[value] as Premise;
export const getPremiseMap = (): Record<Premise, number> => Object.keys(Premise).reduce((acc, v, index) => { acc[v as Premise] = index; return acc; }, {} as Record<Premise, number>);

// from: ../dojo/src/types/round_state.cairo
export enum RoundState {
  Null = 'Null', // 0
  Commit = 'Commit', // 1
  Reveal = 'Reveal', // 2
  Finished = 'Finished', // 3
};
export const getRoundStateValue = (name: RoundState): number | undefined => _indexOrUndefined(Object.keys(RoundState).indexOf(name));
export const getRoundStateFromValue = (value: number): RoundState | undefined => Object.keys(RoundState)[value] as RoundState;
export const getRoundStateMap = (): Record<RoundState, number> => Object.keys(RoundState).reduce((acc, v, index) => { acc[v as RoundState] = index; return acc; }, {} as Record<RoundState, number>);

// from: ../dojo/src/types/rules.cairo
export enum Rules {
  Undefined = 'Undefined', // 0
  Season = 'Season', // 1
};
export const getRulesValue = (name: Rules): number | undefined => _indexOrUndefined(Object.keys(Rules).indexOf(name));
export const getRulesFromValue = (value: number): Rules | undefined => Object.keys(Rules)[value] as Rules;
export const getRulesMap = (): Record<Rules, number> => Object.keys(Rules).reduce((acc, v, index) => { acc[v as Rules] = index; return acc; }, {} as Record<Rules, number>);

// from: ../dojo/src/types/trophies.cairo
export enum Trophy {
  None = 'None', // 0
  BeginnersLuck = 'BeginnersLuck', // 1
  FirstBlood = 'FirstBlood', // 2
  PerfectDodge = 'PerfectDodge', // 3
  DodgeAndKill = 'DodgeAndKill', // 4
  ShotInTheBack = 'ShotInTheBack', // 5
  ShotAtTheBack = 'ShotAtTheBack', // 6
  DuelCollector = 'DuelCollector', // 7
  VillainousScum = 'VillainousScum', // 8
  HonourableLord = 'HonourableLord', // 9
  Blindfold = 'Blindfold', // 10
  BloodBath = 'BloodBath', // 11
  BladesClash = 'BladesClash', // 12
  DoubleBarrel = 'DoubleBarrel', // 13
  TrippleBarrel = 'TrippleBarrel', // 14
  QuadrupleBarrel = 'QuadrupleBarrel', // 15
  QuintupleBarrel = 'QuintupleBarrel', // 16
  VillainousDeath = 'VillainousDeath', // 17
  TricksterDeath = 'TricksterDeath', // 18
  HonourableDeath = 'HonourableDeath', // 19
  PocketPistol = 'PocketPistol', // 20
  Behead = 'Behead', // 21
  Grapple = 'Grapple', // 22
  Seppuku = 'Seppuku', // 23
  DoubleSeppuku = 'DoubleSeppuku', // 24
  GoneBananas = 'GoneBananas', // 25
  BeatTheOdds = 'BeatTheOdds', // 26
  WastedAmmo = 'WastedAmmo', // 27
  DoThatThing = 'DoThatThing', // 28
  SeasonCollector = 'SeasonCollector', // 29
};
export const getTrophyValue = (name: Trophy): number | undefined => _indexOrUndefined(Object.keys(Trophy).indexOf(name));
export const getTrophyFromValue = (value: number): Trophy | undefined => Object.keys(Trophy)[value] as Trophy;
export const getTrophyMap = (): Record<Trophy, number> => Object.keys(Trophy).reduce((acc, v, index) => { acc[v as Trophy] = index; return acc; }, {} as Record<Trophy, number>);


//----------------------------------
// custom types
//

// from: ../dojo/src/types/cards/hand.cairo
export type DuelistHand = {
  card_fire : PacesCard,
  card_dodge : PacesCard,
  card_tactics : TacticsCard,
  card_blades : BladesCard,
};

// from: ../dojo/src/models/pack.cairo
export type PackDescription = {
  id : string,
  name : string,
  image_url_closed : string,
  image_url_open : string,
  can_purchase : boolean,
  price_lords : bigint,
  quantity : number,
};

// from: ../dojo/src/models/tournament.cairo
export type TournamentRules = {
  settings_id : number,
  description : string,
  max_rounds : number,
  min_lives : number,
  max_lives : number,
  lives_staked : number,
};

// from: ../dojo/src/types/cards/cards.cairo
export type CardPoints = {
  name : string,
  self_chances : number,
  self_damage : number,
  other_chances : number,
  other_damage : number,
  special : string,
};

// from: ../dojo/src/types/cards/cards.cairo
export type EnvCardPoints = {
  name : string,
  rarity : Rarity,
  chances : number,
  damage : number,
};

// from: ../dojo/src/types/duelist_profile.cairo
export type CollectionDescription = {
  name : string,
  folder_name : string,
  profile_count : number,
  is_playable : boolean,
  duelist_id_base : bigint,
};

// from: ../dojo/src/types/duelist_profile.cairo
export type ProfileDescription = {
  name : string,
};

// from: ../dojo/src/types/premise.cairo
export type PremiseDescription = {
  name : string,
  prefix : string,
};


//----------------------------------
// constants
//

// from: ../dojo/src/types/timestamp.cairo
type type_TIMESTAMP = {
  ONE_MINUTE: bigint, // cairo: u64
  ONE_HOUR: bigint, // cairo: u64
  ONE_DAY: bigint, // cairo: u64
  ONE_WEEK: bigint, // cairo: u64
  TWO_WEEKS: bigint, // cairo: u64
  THREE_WEEKS: bigint, // cairo: u64
  FOUR_WEEKS: bigint, // cairo: u64
};
export const TIMESTAMP: type_TIMESTAMP = {
  ONE_MINUTE: 60n,
  ONE_HOUR: (60n * 60n),
  ONE_DAY: (60n * 60n * 24n),
  ONE_WEEK: (60n * 60n * 24n * 7n),
  TWO_WEEKS: (60n * 60n * 24n * 14n),
  THREE_WEEKS: (60n * 60n * 24n * 21n),
  FOUR_WEEKS: (60n * 60n * 24n * 28n),
};

// from: ../dojo/src/types/constants.cairo
type type_CONST = {
  ROUND_COUNT: number, // cairo: u8
  MAX_DUELIST_ID: bigint, // cairo: u128
  FULL_HEALTH: number, // cairo: u8
  DOUBLE_DAMAGE: number, // cairo: u8
  SINGLE_DAMAGE: number, // cairo: u8
  INITIAL_CHANCE: number, // cairo: u8
  INITIAL_DAMAGE: number, // cairo: u8
  ETH_TO_WEI: bigint, // cairo: u256
};
export const CONST: type_CONST = {
  ROUND_COUNT: 1,
  MAX_DUELIST_ID: BigInt('0xffffff'),
  FULL_HEALTH: 3,
  DOUBLE_DAMAGE: 2,
  SINGLE_DAMAGE: 1,
  INITIAL_CHANCE: 50,
  INITIAL_DAMAGE: 1,
  ETH_TO_WEI: 1000000000000000000n,
};

// from: ../dojo/src/types/constants.cairo
type type_HONOUR = {
  TRICKSTER_START: number, // cairo: u8
  LORD_START: number, // cairo: u8
};
export const HONOUR: type_HONOUR = {
  TRICKSTER_START: 40,
  LORD_START: 70,
};

// from: ../dojo/src/types/constants.cairo
type type_CHANCES = {
  NEVER: number, // cairo: u8
  ALWAYS: number, // cairo: u8
};
export const CHANCES: type_CHANCES = {
  NEVER: 0,
  ALWAYS: 100,
};

// from: ../dojo/src/types/constants.cairo
type type_FAME = {
  MINT_GRANT_AMOUNT: bigint, // cairo: u256
  ONE_LIFE: bigint, // cairo: u256
  MAX_INACTIVE_TIMESTAMP: bigint, // cairo: u64
  TIMESTAMP_TO_DRIP_ONE_FAME: bigint, // cairo: u64
  SACRIFICE_PERCENTAGE: number, // cairo: u8
};
export const FAME: type_FAME = {
  MINT_GRANT_AMOUNT: (3000n * CONST.ETH_TO_WEI),
  ONE_LIFE: (1000n * CONST.ETH_TO_WEI),
  MAX_INACTIVE_TIMESTAMP: TIMESTAMP.FOUR_WEEKS,
  TIMESTAMP_TO_DRIP_ONE_FAME: (10n * TIMESTAMP.ONE_MINUTE),
  SACRIFICE_PERCENTAGE: 60,
};

// from: ../dojo/src/interfaces/dns.cairo
type type_SELECTORS = {
  ADMIN: bigint, // cairo: felt252
  BANK: bigint, // cairo: felt252
  GAME: bigint, // cairo: felt252
  RNG: bigint, // cairo: felt252
  RNG_MOCK: bigint, // cairo: felt252
  DUEL_TOKEN: bigint, // cairo: felt252
  DUELIST_TOKEN: bigint, // cairo: felt252
  PACK_TOKEN: bigint, // cairo: felt252
  TOURNAMENT_TOKEN: bigint, // cairo: felt252
  FAME_COIN: bigint, // cairo: felt252
  FOOLS_COIN: bigint, // cairo: felt252
  LORDS_MOCK: bigint, // cairo: felt252
  VRF_MOCK: bigint, // cairo: felt252
  CONFIG: bigint, // cairo: felt252
  SEASON_CONFIG: bigint, // cairo: felt252
  TOKEN_CONFIG: bigint, // cairo: felt252
  COIN_CONFIG: bigint, // cairo: felt252
};
export const SELECTORS: type_SELECTORS = {
  ADMIN: BigInt('0x036fd20372b5d47c092e2fede52897075978efb732aeaeb155d19eb8147f6497'), // selector_from_tag!("pistols-admin")
  BANK: BigInt('0x07a683ab68bc70300995da8de5781002e781f22ba246fe239ebeff02b2230375'), // selector_from_tag!("pistols-bank")
  GAME: BigInt('0x032c102830cbffaddecbdce7ef85735e6f08da08ee762a2d7b09304b6533dd57'), // selector_from_tag!("pistols-game")
  RNG: BigInt('0x013f1a6a9ae118440a997d6624230b59f43516220a1208526c3f66e202910504'), // selector_from_tag!("pistols-rng")
  RNG_MOCK: BigInt('0x00fbd28ccd9cffb9b1783a0bf7cdf42a9b88c49d4568116cd1f7ee70ba415705'), // selector_from_tag!("pistols-rng_mock")
  DUEL_TOKEN: BigInt('0x0670a5c673ac776e00e61c279cf7dc0efbe282787f4d719498e55643c5116063'), // selector_from_tag!("pistols-duel_token")
  DUELIST_TOKEN: BigInt('0x045c96d20393520c5dffeb2f2929fb599034d4fc6e9d423e6a641222fb60a25e'), // selector_from_tag!("pistols-duelist_token")
  PACK_TOKEN: BigInt('0x03d74e76192285c5a19a63c54a6c2ba5b015a1a25818c2d8f9cf75d7fef2b5c1'), // selector_from_tag!("pistols-pack_token")
  TOURNAMENT_TOKEN: BigInt('0x04ca33d8b161f957a982bee3486b9a85c5bc5de8baf22be1f987b3471e5c0b9c'), // selector_from_tag!("pistols-tournament_token")
  FAME_COIN: BigInt('0x0371b95cb7056eb2d21819662e973ed32c345c989aa9f6097e7811a5665a0b0a'), // selector_from_tag!("pistols-fame_coin")
  FOOLS_COIN: BigInt('0x058070034702ab2b03c2911459d7299e63048e70e3d41f77e1d806b4cb8f2dcd'), // selector_from_tag!("pistols-fools_coin")
  LORDS_MOCK: BigInt('0x02b1156e63a09854c3d8dba0cad93b41e1fc4662466a0ffc2a9ec9e54b4bc788'), // selector_from_tag!("pistols-lords_mock")
  VRF_MOCK: BigInt('0x07d13bd4624d7bc31b13c78648f762d0b293e1ca94e19173659859209082629e'), // selector_from_tag!("pistols-vrf_mock")
  CONFIG: BigInt('0x060742fa7259b7ce3ebc0a2dde90b740d1234c770199a822fa2e7cf779dc0392'), // selector_from_tag!("pistols-Config")
  SEASON_CONFIG: BigInt('0x0407b92d935dd7193931243082059cb7180309a73de27eea948ffa0649f6ebf3'), // selector_from_tag!("pistols-SeasonConfig")
  TOKEN_CONFIG: BigInt('0x056ebd3387f45e8b292b472f3539e675031f12cf156c07c309c6403044f71fed'), // selector_from_tag!("pistols-TokenConfig")
  COIN_CONFIG: BigInt('0x026fad4dff063a4f2c3b3889723194b9bdbbbf833e44ff2d573af01741b966ac'), // selector_from_tag!("pistols-CoinConfig")
};

// from: ../dojo/src/models/config.cairo
type type_CONFIG = {
  CONFIG_KEY: number, // cairo: u8
};
export const CONFIG: type_CONFIG = {
  CONFIG_KEY: 1,
};

// from: ../dojo/src/models/pack.cairo
type type_PACK_TYPES = {
  Unknown: PackDescription, // cairo: PackDescription
  StarterPack: PackDescription, // cairo: PackDescription
  GenesisDuelists5x: PackDescription, // cairo: PackDescription
};
export const PACK_TYPES: type_PACK_TYPES = {
  Unknown: {
    id: 'Unknown',
    name: 'Unknown',
    image_url_closed: '/tokens/Unknown.jpg',
    image_url_open: '/tokens/Unknown.jpg',
    can_purchase: false,
    price_lords: 0n,
    quantity: 0,
  },
  StarterPack: {
    id: 'StarterPack',
    name: 'Starter Pack',
    image_url_closed: '/tokens/StarterPack.jpg',
    image_url_open: '/tokens/StarterPack.jpg',
    can_purchase: false,
    price_lords: (20n * CONST.ETH_TO_WEI),
    quantity: 2,
  },
  GenesisDuelists5x: {
    id: 'GenesisDuelists5x',
    name: 'Duelists 5-pack',
    image_url_closed: '/tokens/GenesisDuelists5x.jpg',
    image_url_open: '/tokens/GenesisDuelists5x.jpg',
    can_purchase: true,
    price_lords: (50n * CONST.ETH_TO_WEI),
    quantity: 5,
  },
};

// from: ../dojo/src/models/player.cairo
type type_PlayerErrors = {
  PLAYER_NOT_REGISTERED: string, // cairo: felt252
};
export const PlayerErrors: type_PlayerErrors = {
  PLAYER_NOT_REGISTERED: 'PLAYER: Not registered',
};

// from: ../dojo/src/models/tournament.cairo
type type_TOURNAMENT_RULES = {
  Undefined: TournamentRules, // cairo: TournamentRules
  LastManStanding: TournamentRules, // cairo: TournamentRules
  BestOfThree: TournamentRules, // cairo: TournamentRules
};
export const TOURNAMENT_RULES: type_TOURNAMENT_RULES = {
  Undefined: {
    settings_id: 0,
    description: 'Undefined',
    max_rounds: 0,
    min_lives: 0,
    max_lives: 0,
    lives_staked: 0,
  },
  LastManStanding: {
    settings_id: 1,
    description: 'Last Man Standing',
    max_rounds: 0,
    min_lives: 3,
    max_lives: 3,
    lives_staked: 3,
  },
  BestOfThree: {
    settings_id: 2,
    description: 'Best of Three',
    max_rounds: 3,
    min_lives: 3,
    max_lives: 3,
    lives_staked: 1,
  },
};

// from: ../dojo/src/systems/tokens/budokan_mock.cairo
type type_budokan_mock = {
  TOURNAMENT_OF_1: bigint, // cairo: u64
  TOURNAMENT_OF_2: bigint, // cairo: u64
  TOURNAMENT_OF_3: bigint, // cairo: u64
  TOURNAMENT_OF_5: bigint, // cairo: u64
  TOURNAMENT_OF_6: bigint, // cairo: u64
};
export const budokan_mock: type_budokan_mock = {
  TOURNAMENT_OF_1: 1001n,
  TOURNAMENT_OF_2: 1002n,
  TOURNAMENT_OF_3: 1003n,
  TOURNAMENT_OF_5: 1005n,
  TOURNAMENT_OF_6: 1006n,
};

// from: ../dojo/src/types/cards/blades.cairo
type type_BLADES_POINTS = {
  Seppuku: CardPoints, // cairo: CardPoints
  PocketPistol: CardPoints, // cairo: CardPoints
  Behead: CardPoints, // cairo: CardPoints
  Grapple: CardPoints, // cairo: CardPoints
};
export const BLADES_POINTS: type_BLADES_POINTS = {
  Seppuku: {
    name: 'Seppuku',
    self_chances: 20,
    self_damage: 1,
    other_chances: 0,
    other_damage: 0,
    special: 'Suicide if survives',
  },
  PocketPistol: {
    name: 'Pocket Pistol',
    self_chances: 0,
    self_damage: 0,
    other_chances: -10,
    other_damage: 0,
    special: 'Beats Behead',
  },
  Behead: {
    name: 'Behead',
    self_chances: 0,
    self_damage: 1,
    other_chances: 0,
    other_damage: 0,
    special: 'Beats Grapple',
  },
  Grapple: {
    name: 'Grapple',
    self_chances: 0,
    self_damage: 0,
    other_chances: 0,
    other_damage: -1,
    special: 'Beats Pocket Pistol',
  },
};

// from: ../dojo/src/types/cards/env.cairo
type type_ENV_POINTS = {
  DamageUp: EnvCardPoints, // cairo: EnvCardPoints
  DamageDown: EnvCardPoints, // cairo: EnvCardPoints
  ChancesUp: EnvCardPoints, // cairo: EnvCardPoints
  ChancesDown: EnvCardPoints, // cairo: EnvCardPoints
  DoubleDamageUp: EnvCardPoints, // cairo: EnvCardPoints
  DoubleChancesUp: EnvCardPoints, // cairo: EnvCardPoints
  SpecialAllShotsHit: EnvCardPoints, // cairo: EnvCardPoints
  SpecialAllShotsMiss: EnvCardPoints, // cairo: EnvCardPoints
  SpecialDoubleTactics: EnvCardPoints, // cairo: EnvCardPoints
  SpecialNoTactics: EnvCardPoints, // cairo: EnvCardPoints
};
export const ENV_POINTS: type_ENV_POINTS = {
  DamageUp: {
    name: 'Damage Up',
    rarity: Rarity.Common,
    chances: 0,
    damage: 1,
  },
  DamageDown: {
    name: 'Damage Down',
    rarity: Rarity.Common,
    chances: 0,
    damage: -1,
  },
  ChancesUp: {
    name: 'Chances Up',
    rarity: Rarity.Common,
    chances: 10,
    damage: 0,
  },
  ChancesDown: {
    name: 'Chances Down',
    rarity: Rarity.Common,
    chances: -10,
    damage: 0,
  },
  DoubleDamageUp: {
    name: 'Double Damage Up',
    rarity: Rarity.Uncommon,
    chances: 0,
    damage: 2,
  },
  DoubleChancesUp: {
    name: 'Double Chances Up',
    rarity: Rarity.Uncommon,
    chances: 20,
    damage: 0,
  },
  SpecialAllShotsHit: {
    name: 'All Shots Hit',
    rarity: Rarity.Special,
    chances: 100,
    damage: 0,
  },
  SpecialAllShotsMiss: {
    name: 'All Shots Miss',
    rarity: Rarity.Special,
    chances: -100,
    damage: 0,
  },
  SpecialDoubleTactics: {
    name: 'Double Tactics',
    rarity: Rarity.Special,
    chances: 0,
    damage: 0,
  },
  SpecialNoTactics: {
    name: 'No Tactics',
    rarity: Rarity.Special,
    chances: 0,
    damage: 0,
  },
};

// from: ../dojo/src/types/cards/env.cairo
type type_ENV_DICES = {
  DAMAGE_UP: bigint, // cairo: felt252
  DAMAGE_DOWN: bigint, // cairo: felt252
  CHANCES_UP: bigint, // cairo: felt252
  CHANCES_DOWN: bigint, // cairo: felt252
  DOUBLE_DAMAGE_UP: bigint, // cairo: felt252
  DOUBLE_CHANCES_UP: bigint, // cairo: felt252
  ALL_SHOTS_HIT: bigint, // cairo: felt252
  ALL_SHOTS_MISS: bigint, // cairo: felt252
  DOUBLE_TACTICS: bigint, // cairo: felt252
  NO_TACTICS: bigint, // cairo: felt252
};
export const ENV_DICES: type_ENV_DICES = {
  DAMAGE_UP: 1n,
  DAMAGE_DOWN: 8n,
  CHANCES_UP: 13n,
  CHANCES_DOWN: 20n,
  DOUBLE_DAMAGE_UP: 25n,
  DOUBLE_CHANCES_UP: 28n,
  ALL_SHOTS_HIT: 31n,
  ALL_SHOTS_MISS: 32n,
  DOUBLE_TACTICS: 33n,
  NO_TACTICS: 34n,
};

// from: ../dojo/src/types/cards/tactics.cairo
type type_TACTICS_POINTS = {
  Insult: CardPoints, // cairo: CardPoints
  CoinToss: CardPoints, // cairo: CardPoints
  Vengeful: CardPoints, // cairo: CardPoints
  ThickCoat: CardPoints, // cairo: CardPoints
  Reversal: CardPoints, // cairo: CardPoints
  Bananas: CardPoints, // cairo: CardPoints
};
export const TACTICS_POINTS: type_TACTICS_POINTS = {
  Insult: {
    name: 'Insult',
    self_chances: 0,
    self_damage: 0,
    other_chances: -10,
    other_damage: 1,
    special: '',
  },
  CoinToss: {
    name: 'Coin Toss',
    self_chances: 0,
    self_damage: 0,
    other_chances: 0,
    other_damage: 0,
    special: 'First special doesnt affect you',
  },
  Vengeful: {
    name: 'Vengeful',
    self_chances: 0,
    self_damage: 1,
    other_chances: 0,
    other_damage: 0,
    special: '',
  },
  ThickCoat: {
    name: 'Thick Coat',
    self_chances: 0,
    self_damage: 0,
    other_chances: 0,
    other_damage: -1,
    special: '',
  },
  Reversal: {
    name: 'Reversal',
    self_chances: 0,
    self_damage: 0,
    other_chances: 0,
    other_damage: 0,
    special: 'Next decrease increases both',
  },
  Bananas: {
    name: 'Bananas',
    self_chances: -10,
    self_damage: 0,
    other_chances: -10,
    other_damage: 0,
    special: '',
  },
};

// from: ../dojo/src/types/duelist_profile.cairo
type type_COLLECTIONS = {
  Undefined: CollectionDescription, // cairo: CollectionDescription
  Character: CollectionDescription, // cairo: CollectionDescription
  Bot: CollectionDescription, // cairo: CollectionDescription
  Genesis: CollectionDescription, // cairo: CollectionDescription
};
export const COLLECTIONS: type_COLLECTIONS = {
  Undefined: {
    name: 'Undefined',
    folder_name: 'undefined',
    profile_count: 0,
    is_playable: false,
    duelist_id_base: 0n,
  },
  Character: {
    name: 'Tavern Characters',
    folder_name: 'characters',
    profile_count: 4,
    is_playable: false,
    duelist_id_base: BigInt('0x100000000'),
  },
  Bot: {
    name: 'Practice bots',
    folder_name: 'bots',
    profile_count: 3,
    is_playable: false,
    duelist_id_base: BigInt('0x200000000'),
  },
  Genesis: {
    name: 'Genesis Collection',
    folder_name: 'genesis',
    profile_count: 69,
    is_playable: true,
    duelist_id_base: 0n,
  },
};

// from: ../dojo/src/types/duelist_profile.cairo
type type_CHARACTER_PROFILES = {
  Unknown: ProfileDescription, // cairo: ProfileDescription
  Bartender: ProfileDescription, // cairo: ProfileDescription
  Drunkard: ProfileDescription, // cairo: ProfileDescription
  Devil: ProfileDescription, // cairo: ProfileDescription
  Player: ProfileDescription, // cairo: ProfileDescription
};
export const CHARACTER_PROFILES: type_CHARACTER_PROFILES = {
  Unknown: {
    name: 'Unknown',
  },
  Bartender: {
    name: 'Bartender',
  },
  Drunkard: {
    name: 'Drunkard',
  },
  Devil: {
    name: 'Devil',
  },
  Player: {
    name: 'Stranger',
  },
};

// from: ../dojo/src/types/duelist_profile.cairo
type type_BOT_PROFILES = {
  Unknown: ProfileDescription, // cairo: ProfileDescription
  TinMan: ProfileDescription, // cairo: ProfileDescription
  Scarecrow: ProfileDescription, // cairo: ProfileDescription
  Leon: ProfileDescription, // cairo: ProfileDescription
};
export const BOT_PROFILES: type_BOT_PROFILES = {
  Unknown: {
    name: 'Unknown',
  },
  TinMan: {
    name: 'Tin Man',
  },
  Scarecrow: {
    name: 'Scarecrow',
  },
  Leon: {
    name: 'Leon',
  },
};

// from: ../dojo/src/types/duelist_profile.cairo
type type_GENESIS_PROFILES = {
  Unknown: ProfileDescription, // cairo: ProfileDescription
  SerWalker: ProfileDescription, // cairo: ProfileDescription
  LadyVengeance: ProfileDescription, // cairo: ProfileDescription
  Duke: ProfileDescription, // cairo: ProfileDescription
  Duella: ProfileDescription, // cairo: ProfileDescription
  Jameson: ProfileDescription, // cairo: ProfileDescription
  Misty: ProfileDescription, // cairo: ProfileDescription
  Karaku: ProfileDescription, // cairo: ProfileDescription
  Kenzu: ProfileDescription, // cairo: ProfileDescription
  Pilgrim: ProfileDescription, // cairo: ProfileDescription
  Jack: ProfileDescription, // cairo: ProfileDescription
  Pops: ProfileDescription, // cairo: ProfileDescription
  NynJah: ProfileDescription, // cairo: ProfileDescription
  Thrak: ProfileDescription, // cairo: ProfileDescription
  Bloberto: ProfileDescription, // cairo: ProfileDescription
  Squiddo: ProfileDescription, // cairo: ProfileDescription
  SlenderDuck: ProfileDescription, // cairo: ProfileDescription
  Breadman: ProfileDescription, // cairo: ProfileDescription
  Groggus: ProfileDescription, // cairo: ProfileDescription
  Pistolopher: ProfileDescription, // cairo: ProfileDescription
  Secreto: ProfileDescription, // cairo: ProfileDescription
  ShadowMare: ProfileDescription, // cairo: ProfileDescription
  Fjolnir: ProfileDescription, // cairo: ProfileDescription
  ChimpDylan: ProfileDescription, // cairo: ProfileDescription
  Hinata: ProfileDescription, // cairo: ProfileDescription
  HelixVex: ProfileDescription, // cairo: ProfileDescription
  BuccaneerJames: ProfileDescription, // cairo: ProfileDescription
  TheSensei: ProfileDescription, // cairo: ProfileDescription
  SenseiTarrence: ProfileDescription, // cairo: ProfileDescription
  ThePainter: ProfileDescription, // cairo: ProfileDescription
  Ashe: ProfileDescription, // cairo: ProfileDescription
  SerGogi: ProfileDescription, // cairo: ProfileDescription
  TheSurvivor: ProfileDescription, // cairo: ProfileDescription
  TheFrenchman: ProfileDescription, // cairo: ProfileDescription
  SerFocger: ProfileDescription, // cairo: ProfileDescription
  SillySosij: ProfileDescription, // cairo: ProfileDescription
  BloodBeard: ProfileDescription, // cairo: ProfileDescription
  Fredison: ProfileDescription, // cairo: ProfileDescription
  TheBard: ProfileDescription, // cairo: ProfileDescription
  Ponzimancer: ProfileDescription, // cairo: ProfileDescription
  DealerTani: ProfileDescription, // cairo: ProfileDescription
  SerRichard: ProfileDescription, // cairo: ProfileDescription
  Recipromancer: ProfileDescription, // cairo: ProfileDescription
  Mataleone: ProfileDescription, // cairo: ProfileDescription
  FortunaRegem: ProfileDescription, // cairo: ProfileDescription
  Amaro: ProfileDescription, // cairo: ProfileDescription
  Mononoke: ProfileDescription, // cairo: ProfileDescription
  Parsa: ProfileDescription, // cairo: ProfileDescription
  Jubilee: ProfileDescription, // cairo: ProfileDescription
  LadyOfCrows: ProfileDescription, // cairo: ProfileDescription
  BananaDuke: ProfileDescription, // cairo: ProfileDescription
  LordGladstone: ProfileDescription, // cairo: ProfileDescription
  LadyStrokes: ProfileDescription, // cairo: ProfileDescription
  Bliss: ProfileDescription, // cairo: ProfileDescription
  StormMirror: ProfileDescription, // cairo: ProfileDescription
  Aldreda: ProfileDescription, // cairo: ProfileDescription
  Petronella: ProfileDescription, // cairo: ProfileDescription
  SeraphinaRose: ProfileDescription, // cairo: ProfileDescription
  LucienDeSombrel: ProfileDescription, // cairo: ProfileDescription
  FyernVirelock: ProfileDescription, // cairo: ProfileDescription
  Noir: ProfileDescription, // cairo: ProfileDescription
  QueenAce: ProfileDescription, // cairo: ProfileDescription
  JoshPeel: ProfileDescription, // cairo: ProfileDescription
  IronHandRogan: ProfileDescription, // cairo: ProfileDescription
  GoodPupStarky: ProfileDescription, // cairo: ProfileDescription
  ImyaSuspect: ProfileDescription, // cairo: ProfileDescription
  TheAlchemist: ProfileDescription, // cairo: ProfileDescription
  PonziusPilate: ProfileDescription, // cairo: ProfileDescription
  MistressNoodle: ProfileDescription, // cairo: ProfileDescription
  MasterOfSecrets: ProfileDescription, // cairo: ProfileDescription
};
export const GENESIS_PROFILES: type_GENESIS_PROFILES = {
  Unknown: {
    name: 'Unknown',
  },
  SerWalker: {
    name: 'Ser Walker',
  },
  LadyVengeance: {
    name: 'Lady Vengeance',
  },
  Duke: {
    name: 'Duke',
  },
  Duella: {
    name: 'Duella',
  },
  Jameson: {
    name: 'Jameson',
  },
  Misty: {
    name: 'Misty',
  },
  Karaku: {
    name: 'Karaku',
  },
  Kenzu: {
    name: 'Kenzu',
  },
  Pilgrim: {
    name: 'Pilgrim',
  },
  Jack: {
    name: 'Foolish Jack',
  },
  Pops: {
    name: 'Pops',
  },
  NynJah: {
    name: 'Nyn Jah',
  },
  Thrak: {
    name: 'Thrak',
  },
  Bloberto: {
    name: 'Bloberto',
  },
  Squiddo: {
    name: 'Squiddo',
  },
  SlenderDuck: {
    name: 'Slender Duck',
  },
  Breadman: {
    name: 'Breadman',
  },
  Groggus: {
    name: 'Groggus',
  },
  Pistolopher: {
    name: 'Pistolopher',
  },
  Secreto: {
    name: 'Secreto',
  },
  ShadowMare: {
    name: 'Shadow Mare',
  },
  Fjolnir: {
    name: 'Fjolnir',
  },
  ChimpDylan: {
    name: 'Chimp Dylan',
  },
  Hinata: {
    name: 'Hinata',
  },
  HelixVex: {
    name: 'Helix Vex',
  },
  BuccaneerJames: {
    name: 'Buccaneer James',
  },
  TheSensei: {
    name: 'The Sensei',
  },
  SenseiTarrence: {
    name: 'Sensei Tarrence',
  },
  ThePainter: {
    name: 'The Painter',
  },
  Ashe: {
    name: 'Ashe',
  },
  SerGogi: {
    name: 'Ser Gogi',
  },
  TheSurvivor: {
    name: 'The Survivor',
  },
  TheFrenchman: {
    name: 'The Frenchman',
  },
  SerFocger: {
    name: 'Ser FOCGer',
  },
  SillySosij: {
    name: 'Silly Sosij',
  },
  BloodBeard: {
    name: 'Blood Beard',
  },
  Fredison: {
    name: 'Fredison',
  },
  TheBard: {
    name: 'The Bard',
  },
  Ponzimancer: {
    name: 'Ponzimancer',
  },
  DealerTani: {
    name: 'Dealer Tani',
  },
  SerRichard: {
    name: 'Ser Richard',
  },
  Recipromancer: {
    name: 'Ser Recipro',
  },
  Mataleone: {
    name: 'Ser Mata',
  },
  FortunaRegem: {
    name: 'Master of Veils',
  },
  Amaro: {
    name: 'Monsieur Bongo',
  },
  Mononoke: {
    name: 'The Sorceress',
  },
  Parsa: {
    name: 'The Barbarian',
  },
  Jubilee: {
    name: 'Magus Jubilee',
  },
  LadyOfCrows: {
    name: 'Lady of Crows',
  },
  BananaDuke: {
    name: 'Banana Duke',
  },
  LordGladstone: {
    name: 'Lord Gladstone',
  },
  LadyStrokes: {
    name: 'Lady Strokes',
  },
  Bliss: {
    name: 'Bliss',
  },
  StormMirror: {
    name: 'Storm Mirror',
  },
  Aldreda: {
    name: 'Aldreda',
  },
  Petronella: {
    name: 'Petronella Gigglefern',
  },
  SeraphinaRose: {
    name: 'Seraphina Rose',
  },
  LucienDeSombrel: {
    name: 'Lucien De Sombrel',
  },
  FyernVirelock: {
    name: 'Fyern Virelock',
  },
  Noir: {
    name: 'Noir',
  },
  QueenAce: {
    name: 'Queen Ace',
  },
  JoshPeel: {
    name: 'Josh Peel',
  },
  IronHandRogan: {
    name: 'Iron Hand Rogan',
  },
  GoodPupStarky: {
    name: 'Good Pup Starky',
  },
  ImyaSuspect: {
    name: 'Imya Suspect',
  },
  TheAlchemist: {
    name: 'The Alchemist',
  },
  PonziusPilate: {
    name: 'Ponzius Pilate',
  },
  MistressNoodle: {
    name: 'Mistress Noodle',
  },
  MasterOfSecrets: {
    name: 'Master of Secrets',
  },
};

// from: ../dojo/src/types/premise.cairo
type type_PREMISES = {
  Undefined: PremiseDescription, // cairo: PremiseDescription
  Matter: PremiseDescription, // cairo: PremiseDescription
  Debt: PremiseDescription, // cairo: PremiseDescription
  Dispute: PremiseDescription, // cairo: PremiseDescription
  Honour: PremiseDescription, // cairo: PremiseDescription
  Hatred: PremiseDescription, // cairo: PremiseDescription
  Blood: PremiseDescription, // cairo: PremiseDescription
  Nothing: PremiseDescription, // cairo: PremiseDescription
  Tournament: PremiseDescription, // cairo: PremiseDescription
  Treaty: PremiseDescription, // cairo: PremiseDescription
  Lesson: PremiseDescription, // cairo: PremiseDescription
};
export const PREMISES: type_PREMISES = {
  Undefined: {
    name: 'Undefined',
    prefix: 'over...?',
  },
  Matter: {
    name: 'Matter',
    prefix: 'over the matter of',
  },
  Debt: {
    name: 'Debt',
    prefix: 'to discharge a debt',
  },
  Dispute: {
    name: 'Dispute',
    prefix: 'to satisfy a dispute',
  },
  Honour: {
    name: 'Honour',
    prefix: 'to defend their honour',
  },
  Hatred: {
    name: 'Hatred',
    prefix: 'to satisfy a burning hatred',
  },
  Blood: {
    name: 'Blood',
    prefix: 'for the love of death and blood',
  },
  Nothing: {
    name: 'Nothing',
    prefix: 'for no reason other than',
  },
  Tournament: {
    name: 'Tournament',
    prefix: 'to be the winner of',
  },
  Treaty: {
    name: 'Treaty',
    prefix: 'to settle the terms of',
  },
  Lesson: {
    name: 'Lesson',
    prefix: 'to learn about',
  },
};

// from: ../dojo/src/types/trophies.cairo
type type_TROPHY_ID = {
  COUNT: number, // cairo: u8
  None: string, // cairo: felt252
  BeginnersLuck: string, // cairo: felt252
  FirstBlood: string, // cairo: felt252
  PerfectDodge: string, // cairo: felt252
  DodgeAndKill: string, // cairo: felt252
  ShotInTheBack: string, // cairo: felt252
  ShotAtTheBack: string, // cairo: felt252
  DuelCollector: string, // cairo: felt252
  VillainousScum: string, // cairo: felt252
  HonourableLord: string, // cairo: felt252
  Blindfold: string, // cairo: felt252
  BloodBath: string, // cairo: felt252
  BladesClash: string, // cairo: felt252
  DoubleBarrel: string, // cairo: felt252
  TrippleBarrel: string, // cairo: felt252
  QuadrupleBarrel: string, // cairo: felt252
  QuintupleBarrel: string, // cairo: felt252
  VillainousDeath: string, // cairo: felt252
  TricksterDeath: string, // cairo: felt252
  HonourableDeath: string, // cairo: felt252
  PocketPistol: string, // cairo: felt252
  Behead: string, // cairo: felt252
  Grapple: string, // cairo: felt252
  Seppuku: string, // cairo: felt252
  DoubleSeppuku: string, // cairo: felt252
  GoneBananas: string, // cairo: felt252
  BeatTheOdds: string, // cairo: felt252
  WastedAmmo: string, // cairo: felt252
  DoThatThing: string, // cairo: felt252
  SeasonCollector: string, // cairo: felt252
};
export const TROPHY_ID: type_TROPHY_ID = {
  COUNT: 29,
  None: '',
  BeginnersLuck: 'BeginnersLuck',
  FirstBlood: 'FirstBlood',
  PerfectDodge: 'PerfectDodge',
  DodgeAndKill: 'DodgeAndKill',
  ShotInTheBack: 'ShotInTheBack',
  ShotAtTheBack: 'ShotAtTheBack',
  DuelCollector: 'DuelCollector',
  VillainousScum: 'VillainousScum',
  HonourableLord: 'HonourableLord',
  Blindfold: 'Blindfold',
  BloodBath: 'BloodBath',
  BladesClash: 'BladesClash',
  DoubleBarrel: 'DoubleBarrel',
  TrippleBarrel: 'TrippleBarrel',
  QuadrupleBarrel: 'QuadrupleBarrel',
  QuintupleBarrel: 'QuintupleBarrel',
  VillainousDeath: 'VillainousDeath',
  TricksterDeath: 'TricksterDeath',
  HonourableDeath: 'HonourableDeath',
  PocketPistol: 'PocketPistol',
  Behead: 'Behead',
  Grapple: 'Grapple',
  Seppuku: 'Seppuku',
  DoubleSeppuku: 'DoubleSeppuku',
  GoneBananas: 'GoneBananas',
  BeatTheOdds: 'BeatTheOdds',
  WastedAmmo: 'WastedAmmo',
  DoThatThing: 'DoThatThing',
  SeasonCollector: 'SeasonCollector',
};

// from: ../dojo/src/types/trophies.cairo
type type_TROPHY_GROUP = {
  Player: string, // cairo: felt252
  Honour: string, // cairo: felt252
  Duelist: string, // cairo: felt252
  Tactics: string, // cairo: felt252
};
export const TROPHY_GROUP: type_TROPHY_GROUP = {
  Player: 'Player',
  Honour: 'Honour',
  Duelist: 'Duelist',
  Tactics: 'Tactics',
};

// from: ../dojo/src/utils/bitwise.cairo
type type_BITWISE = {
  MAX_U8: number, // cairo: u8
  MAX_U16: number, // cairo: u16
  MAX_U32: number, // cairo: u32
  MAX_U64: bigint, // cairo: u64
  MAX_U128: bigint, // cairo: u128
  MAX_U256: bigint, // cairo: u256
  MSB_U8: number, // cairo: u8
  MSB_U16: number, // cairo: u16
  MSB_U32: number, // cairo: u32
  MSB_U64: bigint, // cairo: u64
  MSB_U128: bigint, // cairo: u128
  MSB_U256: bigint, // cairo: u256
};
export const BITWISE: type_BITWISE = {
  MAX_U8: 0xff,
  MAX_U16: 0xffff,
  MAX_U32: 0xffffffff,
  MAX_U64: BigInt('0xffffffffffffffff'),
  MAX_U128: BigInt('0xffffffffffffffffffffffffffffffff'),
  MAX_U256: BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),
  MSB_U8: 0x80,
  MSB_U16: 0x8000,
  MSB_U32: 0x80000000,
  MSB_U64: BigInt('0x8000000000000000'),
  MSB_U128: BigInt('0x80000000000000000000000000000000'),
  MSB_U256: BigInt('0x8000000000000000000000000000000000000000000000000000000000000000'),
};
