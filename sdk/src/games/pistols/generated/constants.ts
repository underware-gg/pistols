/* Autogenerated file. Do not edit manually. */

//----------------------------------
// helpers
//
const _indexOrUndefined = (v: number) => (v >= 0 ? v : undefined);


//----------------------------------
// enums
//

// from: ../dojo/src/interfaces/vrf.cairo
export enum Source {
  Nonce = 'Nonce', // 0
  Salt = 'Salt', // 1
};
export const getSourceValue = (name: Source): number | undefined => _indexOrUndefined(Object.keys(Source).indexOf(name));
export const getSourceFromValue = (value: number): Source | undefined => Object.keys(Source)[value] as Source;
export const getSourceMap = (): Record<Source, number> => Object.keys(Source).reduce((acc, v, index) => { acc[v as Source] = index; return acc; }, {} as Record<Source, number>);

// from: ../dojo/src/models/duelist.cairo
export enum Archetype {
  Undefined = 'Undefined', // 0
  Villainous = 'Villainous', // 1
  Trickster = 'Trickster', // 2
  Honourable = 'Honourable', // 3
};
export const getArchetypeValue = (name: Archetype): number | undefined => _indexOrUndefined(Object.keys(Archetype).indexOf(name));
export const getArchetypeFromValue = (value: number): Archetype | undefined => Object.keys(Archetype)[value] as Archetype;
export const getArchetypeMap = (): Record<Archetype, number> => Object.keys(Archetype).reduce((acc, v, index) => { acc[v as Archetype] = index; return acc; }, {} as Record<Archetype, number>);

// from: ../dojo/src/models/pack.cairo
export enum PackType {
  Unknown = 'Unknown', // 0
  WelcomePack = 'WelcomePack', // 1
  Duelists5x = 'Duelists5x', // 2
};
export const getPackTypeValue = (name: PackType): number | undefined => _indexOrUndefined(Object.keys(PackType).indexOf(name));
export const getPackTypeFromValue = (value: number): PackType | undefined => Object.keys(PackType)[value] as PackType;
export const getPackTypeMap = (): Record<PackType, number> => Object.keys(PackType).reduce((acc, v, index) => { acc[v as PackType] = index; return acc; }, {} as Record<PackType, number>);

// from: ../dojo/src/models/player.cairo
export enum Activity {
  Undefined = 'Undefined', // 0
  StartedTutorial = 'StartedTutorial', // 1
  FinishedTutorial = 'FinishedTutorial', // 2
  WelcomePack = 'WelcomePack', // 3
  PurchasedPack = 'PurchasedPack', // 4
  CreatedDuelist = 'CreatedDuelist', // 5
  CreatedChallenge = 'CreatedChallenge', // 6
  RepliedChallenge = 'RepliedChallenge', // 7
  CommittedMoves = 'CommittedMoves', // 8
  RevealedMoves = 'RevealedMoves', // 9
  DuelResolved = 'DuelResolved', // 10
  DuelDraw = 'DuelDraw', // 11
};
export const getActivityValue = (name: Activity): number | undefined => _indexOrUndefined(Object.keys(Activity).indexOf(name));
export const getActivityFromValue = (value: number): Activity | undefined => Object.keys(Activity)[value] as Activity;
export const getActivityMap = (): Record<Activity, number> => Object.keys(Activity).reduce((acc, v, index) => { acc[v as Activity] = index; return acc; }, {} as Record<Activity, number>);

// from: ../dojo/src/models/player.cairo
export enum TutorialProgress {
  None = 'None', // 0
  FinishedFirst = 'FinishedFirst', // 1
  FinishedSecond = 'FinishedSecond', // 2
  FinishedFirstDuel = 'FinishedFirstDuel', // 3
};
export const getTutorialProgressValue = (name: TutorialProgress): number | undefined => _indexOrUndefined(Object.keys(TutorialProgress).indexOf(name));
export const getTutorialProgressFromValue = (value: number): TutorialProgress | undefined => Object.keys(TutorialProgress)[value] as TutorialProgress;
export const getTutorialProgressMap = (): Record<TutorialProgress, number> => Object.keys(TutorialProgress).reduce((acc, v, index) => { acc[v as TutorialProgress] = index; return acc; }, {} as Record<TutorialProgress, number>);

// from: ../dojo/src/models/table.cairo
export enum TableType {
  Undefined = 'Undefined', // 0
  Classic = 'Classic', // 1
  Tournament = 'Tournament', // 2
  IRLTournament = 'IRLTournament', // 3
};
export const getTableTypeValue = (name: TableType): number | undefined => _indexOrUndefined(Object.keys(TableType).indexOf(name));
export const getTableTypeFromValue = (value: number): TableType | undefined => Object.keys(TableType)[value] as TableType;
export const getTableTypeMap = (): Record<TableType, number> => Object.keys(TableType).reduce((acc, v, index) => { acc[v as TableType] = index; return acc; }, {} as Record<TableType, number>);

// from: ../dojo/src/types/boolean.cairo
export enum Boolean {
  Undefined = 'Undefined', // 0
  True = 'True', // 1
  False = 'False', // 2
};
export const getBooleanValue = (name: Boolean): number | undefined => _indexOrUndefined(Object.keys(Boolean).indexOf(name));
export const getBooleanFromValue = (value: number): Boolean | undefined => Object.keys(Boolean)[value] as Boolean;
export const getBooleanMap = (): Record<Boolean, number> => Object.keys(Boolean).reduce((acc, v, index) => { acc[v as Boolean] = index; return acc; }, {} as Record<Boolean, number>);

// from: ../dojo/src/types/cards/blades.cairo
export enum BladesCard {
  None = 'None', // 0
  Seppuku = 'Seppuku', // 1
  PocketPistol = 'PocketPistol', // 2
  Behead = 'Behead', // 3
  Grapple = 'Grapple', // 4
};
export const getBladesCardValue = (name: BladesCard): number | undefined => _indexOrUndefined(Object.keys(BladesCard).indexOf(name));
export const getBladesCardFromValue = (value: number): BladesCard | undefined => Object.keys(BladesCard)[value] as BladesCard;
export const getBladesCardMap = (): Record<BladesCard, number> => Object.keys(BladesCard).reduce((acc, v, index) => { acc[v as BladesCard] = index; return acc; }, {} as Record<BladesCard, number>);

// from: ../dojo/src/types/cards/cards.cairo
export enum Rarity {
  None = 'None', // 0
  Common = 'Common', // 1
  Uncommon = 'Uncommon', // 2
  Special = 'Special', // 3
};
export const getRarityValue = (name: Rarity): number | undefined => _indexOrUndefined(Object.keys(Rarity).indexOf(name));
export const getRarityFromValue = (value: number): Rarity | undefined => Object.keys(Rarity)[value] as Rarity;
export const getRarityMap = (): Record<Rarity, number> => Object.keys(Rarity).reduce((acc, v, index) => { acc[v as Rarity] = index; return acc; }, {} as Record<Rarity, number>);

// from: ../dojo/src/types/cards/env.cairo
export enum EnvCard {
  None = 'None', // 0
  DamageUp = 'DamageUp', // 1
  DamageDown = 'DamageDown', // 2
  ChancesUp = 'ChancesUp', // 3
  ChancesDown = 'ChancesDown', // 4
  DoubleDamageUp = 'DoubleDamageUp', // 5
  DoubleChancesUp = 'DoubleChancesUp', // 6
  SpecialAllShotsHit = 'SpecialAllShotsHit', // 7
  SpecialAllShotsMiss = 'SpecialAllShotsMiss', // 8
  SpecialDoubleTactics = 'SpecialDoubleTactics', // 9
  SpecialNoTactics = 'SpecialNoTactics', // 10
};
export const getEnvCardValue = (name: EnvCard): number | undefined => _indexOrUndefined(Object.keys(EnvCard).indexOf(name));
export const getEnvCardFromValue = (value: number): EnvCard | undefined => Object.keys(EnvCard)[value] as EnvCard;
export const getEnvCardMap = (): Record<EnvCard, number> => Object.keys(EnvCard).reduce((acc, v, index) => { acc[v as EnvCard] = index; return acc; }, {} as Record<EnvCard, number>);

// from: ../dojo/src/types/cards/hand.cairo
export enum DeckType {
  None = 'None', // 0
  Classic = 'Classic', // 1
};
export const getDeckTypeValue = (name: DeckType): number | undefined => _indexOrUndefined(Object.keys(DeckType).indexOf(name));
export const getDeckTypeFromValue = (value: number): DeckType | undefined => Object.keys(DeckType)[value] as DeckType;
export const getDeckTypeMap = (): Record<DeckType, number> => Object.keys(DeckType).reduce((acc, v, index) => { acc[v as DeckType] = index; return acc; }, {} as Record<DeckType, number>);

// from: ../dojo/src/types/cards/hand.cairo
export enum FinalBlow {
  Undefined = 'Undefined', // 0
  Paces = 'Paces', // 1
  Blades = 'Blades', // 2
};
export const getFinalBlowValue = (name: FinalBlow): number | undefined => _indexOrUndefined(Object.keys(FinalBlow).indexOf(name));
export const getFinalBlowFromValue = (value: number): FinalBlow | undefined => Object.keys(FinalBlow)[value] as FinalBlow;
export const getFinalBlowMap = (): Record<FinalBlow, number> => Object.keys(FinalBlow).reduce((acc, v, index) => { acc[v as FinalBlow] = index; return acc; }, {} as Record<FinalBlow, number>);

// from: ../dojo/src/types/cards/paces.cairo
export enum PacesCard {
  None = 'None', // 0
  Paces1 = 'Paces1', // 1
  Paces2 = 'Paces2', // 2
  Paces3 = 'Paces3', // 3
  Paces4 = 'Paces4', // 4
  Paces5 = 'Paces5', // 5
  Paces6 = 'Paces6', // 6
  Paces7 = 'Paces7', // 7
  Paces8 = 'Paces8', // 8
  Paces9 = 'Paces9', // 9
  Paces10 = 'Paces10', // 10
};
export const getPacesCardValue = (name: PacesCard): number | undefined => _indexOrUndefined(Object.keys(PacesCard).indexOf(name));
export const getPacesCardFromValue = (value: number): PacesCard | undefined => Object.keys(PacesCard)[value] as PacesCard;
export const getPacesCardMap = (): Record<PacesCard, number> => Object.keys(PacesCard).reduce((acc, v, index) => { acc[v as PacesCard] = index; return acc; }, {} as Record<PacesCard, number>);

// from: ../dojo/src/types/cards/tactics.cairo
export enum TacticsCard {
  None = 'None', // 0
  Insult = 'Insult', // 1
  CoinToss = 'CoinToss', // 2
  Vengeful = 'Vengeful', // 3
  ThickCoat = 'ThickCoat', // 4
  Reversal = 'Reversal', // 5
  Bananas = 'Bananas', // 6
};
export const getTacticsCardValue = (name: TacticsCard): number | undefined => _indexOrUndefined(Object.keys(TacticsCard).indexOf(name));
export const getTacticsCardFromValue = (value: number): TacticsCard | undefined => Object.keys(TacticsCard)[value] as TacticsCard;
export const getTacticsCardMap = (): Record<TacticsCard, number> => Object.keys(TacticsCard).reduce((acc, v, index) => { acc[v as TacticsCard] = index; return acc; }, {} as Record<TacticsCard, number>);

// from: ../dojo/src/types/challenge_state.cairo
export enum ChallengeState {
  Null = 'Null', // 0
  Awaiting = 'Awaiting', // 1
  Withdrawn = 'Withdrawn', // 2
  Refused = 'Refused', // 3
  Expired = 'Expired', // 4
  InProgress = 'InProgress', // 5
  Resolved = 'Resolved', // 6
  Draw = 'Draw', // 7
};
export const getChallengeStateValue = (name: ChallengeState): number | undefined => _indexOrUndefined(Object.keys(ChallengeState).indexOf(name));
export const getChallengeStateFromValue = (value: number): ChallengeState | undefined => Object.keys(ChallengeState)[value] as ChallengeState;
export const getChallengeStateMap = (): Record<ChallengeState, number> => Object.keys(ChallengeState).reduce((acc, v, index) => { acc[v as ChallengeState] = index; return acc; }, {} as Record<ChallengeState, number>);

// from: ../dojo/src/types/duel_progress.cairo
export enum DuelistDrawnCard {
  None = 'None', // 0
  Fire = 'Fire', // 1
  Dodge = 'Dodge', // 2
  Blades = 'Blades', // 3
};
export const getDuelistDrawnCardValue = (name: DuelistDrawnCard): number | undefined => _indexOrUndefined(Object.keys(DuelistDrawnCard).indexOf(name));
export const getDuelistDrawnCardFromValue = (value: number): DuelistDrawnCard | undefined => Object.keys(DuelistDrawnCard)[value] as DuelistDrawnCard;
export const getDuelistDrawnCardMap = (): Record<DuelistDrawnCard, number> => Object.keys(DuelistDrawnCard).reduce((acc, v, index) => { acc[v as DuelistDrawnCard] = index; return acc; }, {} as Record<DuelistDrawnCard, number>);

// from: ../dojo/src/types/premise.cairo
export enum Premise {
  Undefined = 'Undefined', // 0
  Matter = 'Matter', // 1
  Debt = 'Debt', // 2
  Dispute = 'Dispute', // 3
  Honour = 'Honour', // 4
  Hatred = 'Hatred', // 5
  Blood = 'Blood', // 6
  Nothing = 'Nothing', // 7
  Tournament = 'Tournament', // 8
};
export const getPremiseValue = (name: Premise): number | undefined => _indexOrUndefined(Object.keys(Premise).indexOf(name));
export const getPremiseFromValue = (value: number): Premise | undefined => Object.keys(Premise)[value] as Premise;
export const getPremiseMap = (): Record<Premise, number> => Object.keys(Premise).reduce((acc, v, index) => { acc[v as Premise] = index; return acc; }, {} as Record<Premise, number>);

// from: ../dojo/src/types/profile_type.cairo
export enum DuelistProfile {
  Unknown = 'Unknown', // 0
  Duke = 'Duke', // 1
  Duella = 'Duella', // 2
  Jameson = 'Jameson', // 3
  Pilgrim = 'Pilgrim', // 4
  Jack = 'Jack', // 5
  Pops = 'Pops', // 6
  SerWalker = 'SerWalker', // 7
  Bloberto = 'Bloberto', // 8
  Squiddo = 'Squiddo', // 9
  SlenderDuck = 'SlenderDuck', // 10
  LadyVengeance = 'LadyVengeance', // 11
  Breadman = 'Breadman', // 12
  Brutus = 'Brutus', // 13
  Pistolopher = 'Pistolopher', // 14
  Secreto = 'Secreto', // 15
  ShadowMare = 'ShadowMare', // 16
  Karaku = 'Karaku', // 17
  Misty = 'Misty', // 18
  Kenzu = 'Kenzu', // 19
  NynJah = 'NynJah', // 20
  Thrak = 'Thrak', // 21
};
export const getDuelistProfileValue = (name: DuelistProfile): number | undefined => _indexOrUndefined(Object.keys(DuelistProfile).indexOf(name));
export const getDuelistProfileFromValue = (value: number): DuelistProfile | undefined => Object.keys(DuelistProfile)[value] as DuelistProfile;
export const getDuelistProfileMap = (): Record<DuelistProfile, number> => Object.keys(DuelistProfile).reduce((acc, v, index) => { acc[v as DuelistProfile] = index; return acc; }, {} as Record<DuelistProfile, number>);

// from: ../dojo/src/types/profile_type.cairo
export enum BotProfile {
  Unknown = 'Unknown', // 0
  Scarecrow = 'Scarecrow', // 1
  TinMan = 'TinMan', // 2
};
export const getBotProfileValue = (name: BotProfile): number | undefined => _indexOrUndefined(Object.keys(BotProfile).indexOf(name));
export const getBotProfileFromValue = (value: number): BotProfile | undefined => Object.keys(BotProfile)[value] as BotProfile;
export const getBotProfileMap = (): Record<BotProfile, number> => Object.keys(BotProfile).reduce((acc, v, index) => { acc[v as BotProfile] = index; return acc; }, {} as Record<BotProfile, number>);

// from: ../dojo/src/types/profile_type.cairo
export enum ProfileType {
  Undefined = 'Undefined', // 0
  Duelist = 'Duelist', // 1
  Bot = 'Bot', // 2
};
export const getProfileTypeValue = (name: ProfileType): number | undefined => _indexOrUndefined(Object.keys(ProfileType).indexOf(name));
export const getProfileTypeFromValue = (value: number): ProfileType | undefined => Object.keys(ProfileType)[value] as ProfileType;
export const getProfileTypeMap = (): Record<ProfileType, number> => Object.keys(ProfileType).reduce((acc, v, index) => { acc[v as ProfileType] = index; return acc; }, {} as Record<ProfileType, number>);

// from: ../dojo/src/types/round_state.cairo
export enum RoundState {
  Null = 'Null', // 0
  Commit = 'Commit', // 1
  Reveal = 'Reveal', // 2
  Finished = 'Finished', // 3
};
export const getRoundStateValue = (name: RoundState): number | undefined => _indexOrUndefined(Object.keys(RoundState).indexOf(name));
export const getRoundStateFromValue = (value: number): RoundState | undefined => Object.keys(RoundState)[value] as RoundState;
export const getRoundStateMap = (): Record<RoundState, number> => Object.keys(RoundState).reduce((acc, v, index) => { acc[v as RoundState] = index; return acc; }, {} as Record<RoundState, number>);


//----------------------------------
// custom types
//

// from: ../dojo/src/models/pack.cairo
export type PackDescription = {
  id : string,
  name : string,
  image_url_closed : string,
  image_url_open : string,
  can_purchase : boolean,
  price : bigint,
};

// from: ../dojo/src/types/cards/cards.cairo
export type CardPoints = {
  name : string,
  self_chances : number,
  self_damage : number,
  other_chances : number,
  other_damage : number,
  special : string,
};

// from: ../dojo/src/types/cards/cards.cairo
export type EnvCardPoints = {
  name : string,
  rarity : Rarity,
  chances : number,
  damage : number,
};

// from: ../dojo/src/types/premise.cairo
export type PremiseDescription = {
  name : string,
  prefix : string,
};

// from: ../dojo/src/types/profile_type.cairo
export type ProfileDescription = {
  profile_id : number,
  name : string,
};


//----------------------------------
// constants
//

// from: ../dojo/src/types/constants.cairo
type type_CONST = {
  DUELIST_PROFILE_COUNT: number, // cairo: u8
  BOT_PROFILE_COUNT: number, // cairo: u8
  WELCOME_PACK_DUELIST_COUNT: number, // cairo: usize
  ROUND_COUNT: number, // cairo: u8
  MAX_DUELIST_ID: bigint, // cairo: u128
  FULL_HEALTH: number, // cairo: u8
  DOUBLE_DAMAGE: number, // cairo: u8
  SINGLE_DAMAGE: number, // cairo: u8
  INITIAL_CHANCE: number, // cairo: u8
  INITIAL_DAMAGE: number, // cairo: u8
  ETH_TO_WEI: bigint, // cairo: u256
};
export const CONST: type_CONST = {
  DUELIST_PROFILE_COUNT: 21,
  BOT_PROFILE_COUNT: 2,
  WELCOME_PACK_DUELIST_COUNT: 5,
  ROUND_COUNT: 1,
  MAX_DUELIST_ID: BigInt('0xffff'),
  FULL_HEALTH: 3,
  DOUBLE_DAMAGE: 2,
  SINGLE_DAMAGE: 1,
  INITIAL_CHANCE: 50,
  INITIAL_DAMAGE: 1,
  ETH_TO_WEI: 1000000000000000000n,
};

// from: ../dojo/src/types/constants.cairo
type type_HONOUR = {
  TRICKSTER_START: number, // cairo: u8
  LORD_START: number, // cairo: u8
};
export const HONOUR: type_HONOUR = {
  TRICKSTER_START: 40,
  LORD_START: 70,
};

// from: ../dojo/src/types/constants.cairo
type type_CHANCES = {
  NEVER: number, // cairo: u8
  ALWAYS: number, // cairo: u8
};
export const CHANCES: type_CHANCES = {
  NEVER: 0,
  ALWAYS: 100,
};

// from: ../dojo/src/types/constants.cairo
type type_FAME = {
  FAME_PER_LORDS: bigint, // cairo: u256
  MIN_MINT_GRANT_AMOUNT: bigint, // cairo: u256
  MIN_REWARD_AMOUNT: bigint, // cairo: u256
};
export const FAME: type_FAME = {
  FAME_PER_LORDS: 10n,
  MIN_MINT_GRANT_AMOUNT: (1000n * CONST.ETH_TO_WEI),
  MIN_REWARD_AMOUNT: (100n * CONST.ETH_TO_WEI),
};

// from: ../dojo/src/interfaces/systems.cairo
type type_SELECTORS = {
  ADMIN: bigint, // cairo: felt252
  BANK: bigint, // cairo: felt252
  GAME: bigint, // cairo: felt252
  RNG: bigint, // cairo: felt252
  DUEL_TOKEN: bigint, // cairo: felt252
  DUELIST_TOKEN: bigint, // cairo: felt252
  PACK_TOKEN: bigint, // cairo: felt252
  FAME_COIN: bigint, // cairo: felt252
  LORDS_MOCK: bigint, // cairo: felt252
  VR_MOCK: bigint, // cairo: felt252
  CONFIG: bigint, // cairo: felt252
  TABLE_CONFIG: bigint, // cairo: felt252
  TOKEN_CONFIG: bigint, // cairo: felt252
  COIN_CONFIG: bigint, // cairo: felt252
  PAYMENT: bigint, // cairo: felt252
};
export const SELECTORS: type_SELECTORS = {
  ADMIN: BigInt('0x036fd20372b5d47c092e2fede52897075978efb732aeaeb155d19eb8147f6497'), // selector_from_tag!("pistols-admin")
  BANK: BigInt('0x07a683ab68bc70300995da8de5781002e781f22ba246fe239ebeff02b2230375'), // selector_from_tag!("pistols-bank")
  GAME: BigInt('0x032c102830cbffaddecbdce7ef85735e6f08da08ee762a2d7b09304b6533dd57'), // selector_from_tag!("pistols-game")
  RNG: BigInt('0x013f1a6a9ae118440a997d6624230b59f43516220a1208526c3f66e202910504'), // selector_from_tag!("pistols-rng")
  DUEL_TOKEN: BigInt('0x0670a5c673ac776e00e61c279cf7dc0efbe282787f4d719498e55643c5116063'), // selector_from_tag!("pistols-duel_token")
  DUELIST_TOKEN: BigInt('0x045c96d20393520c5dffeb2f2929fb599034d4fc6e9d423e6a641222fb60a25e'), // selector_from_tag!("pistols-duelist_token")
  PACK_TOKEN: BigInt('0x03d74e76192285c5a19a63c54a6c2ba5b015a1a25818c2d8f9cf75d7fef2b5c1'), // selector_from_tag!("pistols-pack_token")
  FAME_COIN: BigInt('0x0371b95cb7056eb2d21819662e973ed32c345c989aa9f6097e7811a5665a0b0a'), // selector_from_tag!("pistols-fame_coin")
  LORDS_MOCK: BigInt('0x02b1156e63a09854c3d8dba0cad93b41e1fc4662466a0ffc2a9ec9e54b4bc788'), // selector_from_tag!("pistols-lords_mock")
  VR_MOCK: BigInt('0x07d13bd4624d7bc31b13c78648f762d0b293e1ca94e19173659859209082629e'), // selector_from_tag!("pistols-vrf_mock")
  CONFIG: BigInt('0x060742fa7259b7ce3ebc0a2dde90b740d1234c770199a822fa2e7cf779dc0392'), // selector_from_tag!("pistols-Config")
  TABLE_CONFIG: BigInt('0x01e8368fc88328662c92a11c0e739bf8b74bcd77a20071d2641a31e1a063c138'), // selector_from_tag!("pistols-TableConfig")
  TOKEN_CONFIG: BigInt('0x056ebd3387f45e8b292b472f3539e675031f12cf156c07c309c6403044f71fed'), // selector_from_tag!("pistols-TokenConfig")
  COIN_CONFIG: BigInt('0x026fad4dff063a4f2c3b3889723194b9bdbbbf833e44ff2d573af01741b966ac'), // selector_from_tag!("pistols-CoinConfig")
  PAYMENT: BigInt('0x017a03e9cb461470b9149f9efbd95ad9b217fca9fdccd3827383904c33da96c1'), // selector_from_tag!("pistols-Payment")
};

// from: ../dojo/src/models/config.cairo
type type_CONFIG = {
  CONFIG_KEY: number, // cairo: u8
};
export const CONFIG: type_CONFIG = {
  CONFIG_KEY: 1,
};

// from: ../dojo/src/models/pack.cairo
type type_PACK_TYPES = {
  Unknown: PackDescription, // cairo: PackDescription
  WelcomePack: PackDescription, // cairo: PackDescription
  Duelists5x: PackDescription, // cairo: PackDescription
};
export const PACK_TYPES: type_PACK_TYPES = {
  Unknown: {
    id: 'Unknown',
    name: 'Unknown',
    image_url_closed: '/tokens/Unknown.jpg',
    image_url_open: '/tokens/Unknown.jpg',
    can_purchase: false,
    price: 0n,
  },
  WelcomePack: {
    id: 'WelcomePack',
    name: 'Welcome Pack',
    image_url_closed: '/tokens/WelcomePack.jpg',
    image_url_open: '/tokens/WelcomePack.jpg',
    can_purchase: false,
    price: 0n,
  },
  Duelists5x: {
    id: 'Duelists5x',
    name: 'Duelists 5-pack',
    image_url_closed: '/tokens/Duelists5x.jpg',
    image_url_open: '/tokens/Duelists5x.jpg',
    can_purchase: true,
    price: (100n * CONST.ETH_TO_WEI),
  },
};

// from: ../dojo/src/models/player.cairo
type type_PlayerErrors = {
  PLAYER_NOT_REGISTERED: string, // cairo: felt252
};
export const PlayerErrors: type_PlayerErrors = {
  PLAYER_NOT_REGISTERED: 'PLAYER: Not registered',
};

// from: ../dojo/src/models/table.cairo
type type_TABLES = {
  TUTORIAL: string, // cairo: felt252
  PRACTICE: string, // cairo: felt252
};
export const TABLES: type_TABLES = {
  TUTORIAL: 'Tutorial',
  PRACTICE: 'Practice',
};

// from: ../dojo/src/systems/components/erc721_hooks.cairo
type type_MetadataErrors = {
  INVALID_ATTRIBUTES: string, // cairo: felt252
  INVALID_METADATA: string, // cairo: felt252
};
export const MetadataErrors: type_MetadataErrors = {
  INVALID_ATTRIBUTES: 'METADATA: invalid attributes',
  INVALID_METADATA: 'METADATA: invalid metadata',
};

// from: ../dojo/src/types/cards/blades.cairo
type type_BLADES_POINTS = {
  Seppuku: CardPoints, // cairo: CardPoints
  PocketPistol: CardPoints, // cairo: CardPoints
  Behead: CardPoints, // cairo: CardPoints
  Grapple: CardPoints, // cairo: CardPoints
};
export const BLADES_POINTS: type_BLADES_POINTS = {
  Seppuku: {
    name: 'Seppuku',
    self_chances: 20,
    self_damage: 1,
    other_chances: 0,
    other_damage: 0,
    special: 'Suicide if survives',
  },
  PocketPistol: {
    name: 'Pocket Pistol',
    self_chances: 0,
    self_damage: 0,
    other_chances: -10,
    other_damage: 0,
    special: 'Beats Behead',
  },
  Behead: {
    name: 'Behead',
    self_chances: 0,
    self_damage: 1,
    other_chances: 0,
    other_damage: 0,
    special: 'Beats Grapple',
  },
  Grapple: {
    name: 'Grapple',
    self_chances: 0,
    self_damage: 0,
    other_chances: 0,
    other_damage: -1,
    special: 'Beats Pocket Pistol',
  },
};

// from: ../dojo/src/types/cards/env.cairo
type type_ENV_POINTS = {
  DamageUp: EnvCardPoints, // cairo: EnvCardPoints
  DamageDown: EnvCardPoints, // cairo: EnvCardPoints
  ChancesUp: EnvCardPoints, // cairo: EnvCardPoints
  ChancesDown: EnvCardPoints, // cairo: EnvCardPoints
  DoubleDamageUp: EnvCardPoints, // cairo: EnvCardPoints
  DoubleChancesUp: EnvCardPoints, // cairo: EnvCardPoints
  SpecialAllShotsHit: EnvCardPoints, // cairo: EnvCardPoints
  SpecialAllShotsMiss: EnvCardPoints, // cairo: EnvCardPoints
  SpecialDoubleTactics: EnvCardPoints, // cairo: EnvCardPoints
  SpecialNoTactics: EnvCardPoints, // cairo: EnvCardPoints
};
export const ENV_POINTS: type_ENV_POINTS = {
  DamageUp: {
    name: 'Damage Up',
    rarity: Rarity.Common,
    chances: 0,
    damage: 1,
  },
  DamageDown: {
    name: 'Damage Down',
    rarity: Rarity.Common,
    chances: 0,
    damage: -1,
  },
  ChancesUp: {
    name: 'Chances Up',
    rarity: Rarity.Common,
    chances: 10,
    damage: 0,
  },
  ChancesDown: {
    name: 'Chances Down',
    rarity: Rarity.Common,
    chances: -10,
    damage: 0,
  },
  DoubleDamageUp: {
    name: 'Double Damage Up',
    rarity: Rarity.Uncommon,
    chances: 0,
    damage: 2,
  },
  DoubleChancesUp: {
    name: 'Double Chances Up',
    rarity: Rarity.Uncommon,
    chances: 20,
    damage: 0,
  },
  SpecialAllShotsHit: {
    name: 'All Shots Hit',
    rarity: Rarity.Special,
    chances: 100,
    damage: 0,
  },
  SpecialAllShotsMiss: {
    name: 'All Shots Miss',
    rarity: Rarity.Special,
    chances: -100,
    damage: 0,
  },
  SpecialDoubleTactics: {
    name: 'Double Tactics',
    rarity: Rarity.Special,
    chances: 0,
    damage: 0,
  },
  SpecialNoTactics: {
    name: 'No Tactics',
    rarity: Rarity.Special,
    chances: 0,
    damage: 0,
  },
};

// from: ../dojo/src/types/cards/tactics.cairo
type type_TACTICS_POINTS = {
  Insult: CardPoints, // cairo: CardPoints
  CoinToss: CardPoints, // cairo: CardPoints
  Vengeful: CardPoints, // cairo: CardPoints
  ThickCoat: CardPoints, // cairo: CardPoints
  Reversal: CardPoints, // cairo: CardPoints
  Bananas: CardPoints, // cairo: CardPoints
};
export const TACTICS_POINTS: type_TACTICS_POINTS = {
  Insult: {
    name: 'Insult',
    self_chances: 0,
    self_damage: 0,
    other_chances: -10,
    other_damage: 1,
    special: '',
  },
  CoinToss: {
    name: 'Coin Toss',
    self_chances: 0,
    self_damage: 0,
    other_chances: 0,
    other_damage: 0,
    special: 'First special doesnt affect you',
  },
  Vengeful: {
    name: 'Vengeful',
    self_chances: 0,
    self_damage: 1,
    other_chances: 0,
    other_damage: 0,
    special: '',
  },
  ThickCoat: {
    name: 'Thick Coat',
    self_chances: 0,
    self_damage: 0,
    other_chances: 0,
    other_damage: -1,
    special: '',
  },
  Reversal: {
    name: 'Reversal',
    self_chances: 0,
    self_damage: 0,
    other_chances: 0,
    other_damage: 0,
    special: 'Next decrease increases both',
  },
  Bananas: {
    name: 'Bananas',
    self_chances: -10,
    self_damage: 0,
    other_chances: -10,
    other_damage: 0,
    special: '',
  },
};

// from: ../dojo/src/types/premise.cairo
type type_PREMISES = {
  Undefined: PremiseDescription, // cairo: PremiseDescription
  Matter: PremiseDescription, // cairo: PremiseDescription
  Debt: PremiseDescription, // cairo: PremiseDescription
  Dispute: PremiseDescription, // cairo: PremiseDescription
  Honour: PremiseDescription, // cairo: PremiseDescription
  Hatred: PremiseDescription, // cairo: PremiseDescription
  Blood: PremiseDescription, // cairo: PremiseDescription
  Nothing: PremiseDescription, // cairo: PremiseDescription
  Tournament: PremiseDescription, // cairo: PremiseDescription
};
export const PREMISES: type_PREMISES = {
  Undefined: {
    name: 'Undefined',
    prefix: 'over...?',
  },
  Matter: {
    name: 'Matter',
    prefix: 'over the matter of',
  },
  Debt: {
    name: 'Debt',
    prefix: 'to discharge a debt',
  },
  Dispute: {
    name: 'Dispute',
    prefix: 'to satisfy a dispute',
  },
  Honour: {
    name: 'Honour',
    prefix: 'to defend their honour',
  },
  Hatred: {
    name: 'Hatred',
    prefix: 'to satisfy a burning hatred',
  },
  Blood: {
    name: 'Blood',
    prefix: 'for the love of death and blood',
  },
  Nothing: {
    name: 'Nothing',
    prefix: 'for no reason other than',
  },
  Tournament: {
    name: 'Tournament',
    prefix: 'to be the winner of',
  },
};

// from: ../dojo/src/types/profile_type.cairo
type type_DUELIST_PROFILES = {
  Unknown: ProfileDescription, // cairo: ProfileDescription
  Duke: ProfileDescription, // cairo: ProfileDescription
  Duella: ProfileDescription, // cairo: ProfileDescription
  Jameson: ProfileDescription, // cairo: ProfileDescription
  Pilgrim: ProfileDescription, // cairo: ProfileDescription
  Jack: ProfileDescription, // cairo: ProfileDescription
  Pops: ProfileDescription, // cairo: ProfileDescription
  SerWalker: ProfileDescription, // cairo: ProfileDescription
  Bloberto: ProfileDescription, // cairo: ProfileDescription
  Squiddo: ProfileDescription, // cairo: ProfileDescription
  SlenderDuck: ProfileDescription, // cairo: ProfileDescription
  LadyVengeance: ProfileDescription, // cairo: ProfileDescription
  Breadman: ProfileDescription, // cairo: ProfileDescription
  Brutus: ProfileDescription, // cairo: ProfileDescription
  Pistolopher: ProfileDescription, // cairo: ProfileDescription
  Secreto: ProfileDescription, // cairo: ProfileDescription
  ShadowMare: ProfileDescription, // cairo: ProfileDescription
  Karaku: ProfileDescription, // cairo: ProfileDescription
  Misty: ProfileDescription, // cairo: ProfileDescription
  Kenzu: ProfileDescription, // cairo: ProfileDescription
  NynJah: ProfileDescription, // cairo: ProfileDescription
  Thrak: ProfileDescription, // cairo: ProfileDescription
};
export const DUELIST_PROFILES: type_DUELIST_PROFILES = {
  Unknown: {
    profile_id: 0,
    name: 'Unknown',
  },
  Duke: {
    profile_id: 1,
    name: 'Duke',
  },
  Duella: {
    profile_id: 2,
    name: 'Duella',
  },
  Jameson: {
    profile_id: 3,
    name: 'Jameson',
  },
  Pilgrim: {
    profile_id: 4,
    name: 'Pilgrim',
  },
  Jack: {
    profile_id: 5,
    name: 'Jack',
  },
  Pops: {
    profile_id: 6,
    name: 'Pops',
  },
  SerWalker: {
    profile_id: 7,
    name: 'Ser Walker',
  },
  Bloberto: {
    profile_id: 8,
    name: 'Bloberto',
  },
  Squiddo: {
    profile_id: 9,
    name: 'Squiddo',
  },
  SlenderDuck: {
    profile_id: 10,
    name: 'Slender Duck',
  },
  LadyVengeance: {
    profile_id: 11,
    name: 'Lady Vengeance',
  },
  Breadman: {
    profile_id: 12,
    name: 'Breadman',
  },
  Brutus: {
    profile_id: 13,
    name: 'Brutus',
  },
  Pistolopher: {
    profile_id: 14,
    name: 'Pistolopher',
  },
  Secreto: {
    profile_id: 15,
    name: 'Secreto',
  },
  ShadowMare: {
    profile_id: 16,
    name: 'Shadow Mare',
  },
  Karaku: {
    profile_id: 17,
    name: 'Karaku',
  },
  Misty: {
    profile_id: 18,
    name: 'Misty',
  },
  Kenzu: {
    profile_id: 19,
    name: 'Kenzu',
  },
  NynJah: {
    profile_id: 20,
    name: 'Nyn Jah',
  },
  Thrak: {
    profile_id: 21,
    name: 'Thrak',
  },
};

// from: ../dojo/src/types/profile_type.cairo
type type_BOT_PROFILES = {
  Unknown: ProfileDescription, // cairo: ProfileDescription
  Scarecrow: ProfileDescription, // cairo: ProfileDescription
  TinMan: ProfileDescription, // cairo: ProfileDescription
};
export const BOT_PROFILES: type_BOT_PROFILES = {
  Unknown: {
    profile_id: 0,
    name: 'Unknown',
  },
  Scarecrow: {
    profile_id: 1,
    name: 'Scarecrow',
  },
  TinMan: {
    profile_id: 2,
    name: 'Tin Man',
  },
};

// from: ../dojo/src/types/trophies.cairo
type type_TROPHY = {
  COUNT: number, // cairo: u8
};
export const TROPHY: type_TROPHY = {
  COUNT: 2,
};

// from: ../dojo/src/types/trophies.cairo
type type_TROPHY_ID = {
  None: string, // cairo: felt252
  FirstBlood: string, // cairo: felt252
  Collector: string, // cairo: felt252
};
export const TROPHY_ID: type_TROPHY_ID = {
  None: '',
  FirstBlood: 'FIRST_BLOOD',
  Collector: 'COLLECTOR',
};

// from: ../dojo/src/types/typed_data.cairo
type type_TYPED_DATA = {
  NAME: string, // cairo: felt252
  VERSION: string, // cairo: felt252
  COMMIT_MOVE_MESSAGE_TYPE_HASH: bigint, // cairo: felt252
};
export const TYPED_DATA: type_TYPED_DATA = {
  NAME: 'Underware_gg',
  VERSION: '1.0.0',
  COMMIT_MOVE_MESSAGE_TYPE_HASH: BigInt('0x74fe0c723488214ab442c24761e9b32d30216def5e93d1c110375d993482ae'),
};

// from: ../dojo/src/utils/bitwise.cairo
type type_BITWISE = {
  MAX_U8: number, // cairo: u8
  MAX_U16: number, // cairo: u16
  MAX_U32: number, // cairo: u32
  MAX_U64: bigint, // cairo: u64
  MAX_U128: bigint, // cairo: u128
  MAX_U256: bigint, // cairo: u256
  MSB_U8: number, // cairo: u8
  MSB_U16: number, // cairo: u16
  MSB_U32: number, // cairo: u32
  MSB_U64: bigint, // cairo: u64
  MSB_U128: bigint, // cairo: u128
  MSB_U256: bigint, // cairo: u256
};
export const BITWISE: type_BITWISE = {
  MAX_U8: 0xff,
  MAX_U16: 0xffff,
  MAX_U32: 0xffffffff,
  MAX_U64: BigInt('0xffffffffffffffff'),
  MAX_U128: BigInt('0xffffffffffffffffffffffffffffffff'),
  MAX_U256: BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'),
  MSB_U8: 0x80,
  MSB_U16: 0x8000,
  MSB_U32: 0x80000000,
  MSB_U64: BigInt('0x8000000000000000'),
  MSB_U128: BigInt('0x80000000000000000000000000000000'),
  MSB_U256: BigInt('0x8000000000000000000000000000000000000000000000000000000000000000'),
};
