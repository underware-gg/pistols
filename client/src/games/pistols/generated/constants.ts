/* Autogenerated file. Do not edit manually. */
import { BigNumberish } from 'starknet';

//
// enums
//

// from: ../dojo/src/models/duelist.cairo
export enum Archetype {
  Undefined = 'Undefined',
  Villainous = 'Villainous',
  Trickster = 'Trickster',
  Honourable = 'Honourable',
};
export const ArchetypeNameToValue: Record<Archetype, number> = {
  [Archetype.Undefined]: 0,
  [Archetype.Villainous]: 1,
  [Archetype.Trickster]: 2,
  [Archetype.Honourable]: 3,
};
export const getArchetypeValue = (name: Archetype): number => (ArchetypeNameToValue[name as string]);
export const getArchetypeFromValue = (value: number): Archetype => Object.keys(ArchetypeNameToValue).find(key => ArchetypeNameToValue[key] === value) as Archetype;

// from: ../dojo/src/models/duelist.cairo
export enum ProfilePicType {
  Undefined = 'Undefined',
  Duelist = 'Duelist',
  External = 'External',
};
export const ProfilePicTypeNameToValue: Record<ProfilePicType, number> = {
  [ProfilePicType.Undefined]: 0,
  [ProfilePicType.Duelist]: 1,
  [ProfilePicType.External]: 2,
};
export const getProfilePicTypeValue = (name: ProfilePicType): number => (ProfilePicTypeNameToValue[name as string]);
export const getProfilePicTypeFromValue = (value: number): ProfilePicType => Object.keys(ProfilePicTypeNameToValue).find(key => ProfilePicTypeNameToValue[key] === value) as ProfilePicType;

// from: ../dojo/src/models/table.cairo
export enum TableType {
  Undefined = 'Undefined',
  Classic = 'Classic',
  Tournament = 'Tournament',
  IRLTournament = 'IRLTournament',
};
export const TableTypeNameToValue: Record<TableType, number> = {
  [TableType.Undefined]: 0,
  [TableType.Classic]: 1,
  [TableType.Tournament]: 2,
  [TableType.IRLTournament]: 3,
};
export const getTableTypeValue = (name: TableType): number => (TableTypeNameToValue[name as string]);
export const getTableTypeFromValue = (value: number): TableType => Object.keys(TableTypeNameToValue).find(key => TableTypeNameToValue[key] === value) as TableType;

// from: ../dojo/src/types/cards/blades.cairo
export enum BladesCard {
  None = 'None',
  Seppuku = 'Seppuku',
  RunAway = 'RunAway',
  Behead = 'Behead',
  Grapple = 'Grapple',
};
export const BladesCardNameToValue: Record<BladesCard, number> = {
  [BladesCard.None]: 0,
  [BladesCard.Seppuku]: 1,
  [BladesCard.RunAway]: 2,
  [BladesCard.Behead]: 3,
  [BladesCard.Grapple]: 4,
};
export const getBladesCardValue = (name: BladesCard): number => (BladesCardNameToValue[name as string]);
export const getBladesCardFromValue = (value: number): BladesCard => Object.keys(BladesCardNameToValue).find(key => BladesCardNameToValue[key] === value) as BladesCard;

// from: ../dojo/src/types/cards/cards.cairo
export enum Rarity {
  None = 'None',
  Common = 'Common',
  Uncommon = 'Uncommon',
  Special = 'Special',
};
export const RarityNameToValue: Record<Rarity, number> = {
  [Rarity.None]: 0,
  [Rarity.Common]: 1,
  [Rarity.Uncommon]: 2,
  [Rarity.Special]: 3,
};
export const getRarityValue = (name: Rarity): number => (RarityNameToValue[name as string]);
export const getRarityFromValue = (value: number): Rarity => Object.keys(RarityNameToValue).find(key => RarityNameToValue[key] === value) as Rarity;

// from: ../dojo/src/types/cards/env.cairo
export enum EnvCard {
  None = 'None',
  DamageUp = 'DamageUp',
  DamageDown = 'DamageDown',
  ChancesUp = 'ChancesUp',
  ChancesDown = 'ChancesDown',
  DoubleDamageUp = 'DoubleDamageUp',
  DoubleChancesUp = 'DoubleChancesUp',
  SpecialAllShotsHit = 'SpecialAllShotsHit',
  SpecialAllShotsMiss = 'SpecialAllShotsMiss',
  SpecialDoubleTactics = 'SpecialDoubleTactics',
  SpecialNoTactics = 'SpecialNoTactics',
};
export const EnvCardNameToValue: Record<EnvCard, number> = {
  [EnvCard.None]: 0,
  [EnvCard.DamageUp]: 1,
  [EnvCard.DamageDown]: 2,
  [EnvCard.ChancesUp]: 3,
  [EnvCard.ChancesDown]: 4,
  [EnvCard.DoubleDamageUp]: 5,
  [EnvCard.DoubleChancesUp]: 6,
  [EnvCard.SpecialAllShotsHit]: 7,
  [EnvCard.SpecialAllShotsMiss]: 8,
  [EnvCard.SpecialDoubleTactics]: 9,
  [EnvCard.SpecialNoTactics]: 10,
};
export const getEnvCardValue = (name: EnvCard): number => (EnvCardNameToValue[name as string]);
export const getEnvCardFromValue = (value: number): EnvCard => Object.keys(EnvCardNameToValue).find(key => EnvCardNameToValue[key] === value) as EnvCard;

// from: ../dojo/src/types/cards/paces.cairo
export enum PacesCard {
  None = 'None',
  Paces1 = 'Paces1',
  Paces2 = 'Paces2',
  Paces3 = 'Paces3',
  Paces4 = 'Paces4',
  Paces5 = 'Paces5',
  Paces6 = 'Paces6',
  Paces7 = 'Paces7',
  Paces8 = 'Paces8',
  Paces9 = 'Paces9',
  Paces10 = 'Paces10',
};
export const PacesCardNameToValue: Record<PacesCard, number> = {
  [PacesCard.None]: 0,
  [PacesCard.Paces1]: 1,
  [PacesCard.Paces2]: 2,
  [PacesCard.Paces3]: 3,
  [PacesCard.Paces4]: 4,
  [PacesCard.Paces5]: 5,
  [PacesCard.Paces6]: 6,
  [PacesCard.Paces7]: 7,
  [PacesCard.Paces8]: 8,
  [PacesCard.Paces9]: 9,
  [PacesCard.Paces10]: 10,
};
export const getPacesCardValue = (name: PacesCard): number => (PacesCardNameToValue[name as string]);
export const getPacesCardFromValue = (value: number): PacesCard => Object.keys(PacesCardNameToValue).find(key => PacesCardNameToValue[key] === value) as PacesCard;

// from: ../dojo/src/types/cards/tactics.cairo
export enum TacticsCard {
  None = 'None',
  Insult = 'Insult',
  CoinToss = 'CoinToss',
  Vengeful = 'Vengeful',
  ThickCoat = 'ThickCoat',
  Reversal = 'Reversal',
  Bananas = 'Bananas',
};
export const TacticsCardNameToValue: Record<TacticsCard, number> = {
  [TacticsCard.None]: 0,
  [TacticsCard.Insult]: 1,
  [TacticsCard.CoinToss]: 2,
  [TacticsCard.Vengeful]: 3,
  [TacticsCard.ThickCoat]: 4,
  [TacticsCard.Reversal]: 5,
  [TacticsCard.Bananas]: 6,
};
export const getTacticsCardValue = (name: TacticsCard): number => (TacticsCardNameToValue[name as string]);
export const getTacticsCardFromValue = (value: number): TacticsCard => Object.keys(TacticsCardNameToValue).find(key => TacticsCardNameToValue[key] === value) as TacticsCard;

// from: ../dojo/src/types/challenge_state.cairo
export enum ChallengeState {
  Null = 'Null',
  Awaiting = 'Awaiting',
  Withdrawn = 'Withdrawn',
  Refused = 'Refused',
  Expired = 'Expired',
  InProgress = 'InProgress',
  Resolved = 'Resolved',
  Draw = 'Draw',
};
export const ChallengeStateNameToValue: Record<ChallengeState, number> = {
  [ChallengeState.Null]: 0,
  [ChallengeState.Awaiting]: 1,
  [ChallengeState.Withdrawn]: 2,
  [ChallengeState.Refused]: 3,
  [ChallengeState.Expired]: 4,
  [ChallengeState.InProgress]: 5,
  [ChallengeState.Resolved]: 6,
  [ChallengeState.Draw]: 7,
};
export const getChallengeStateValue = (name: ChallengeState): number => (ChallengeStateNameToValue[name as string]);
export const getChallengeStateFromValue = (value: number): ChallengeState => Object.keys(ChallengeStateNameToValue).find(key => ChallengeStateNameToValue[key] === value) as ChallengeState;

// from: ../dojo/src/types/duel_progress.cairo
export enum DuelistDrawnCard {
  None = 'None',
  Fire = 'Fire',
  Dodge = 'Dodge',
  Blades = 'Blades',
};
export const DuelistDrawnCardNameToValue: Record<DuelistDrawnCard, number> = {
  [DuelistDrawnCard.None]: 0,
  [DuelistDrawnCard.Fire]: 1,
  [DuelistDrawnCard.Dodge]: 2,
  [DuelistDrawnCard.Blades]: 3,
};
export const getDuelistDrawnCardValue = (name: DuelistDrawnCard): number => (DuelistDrawnCardNameToValue[name as string]);
export const getDuelistDrawnCardFromValue = (value: number): DuelistDrawnCard => Object.keys(DuelistDrawnCardNameToValue).find(key => DuelistDrawnCardNameToValue[key] === value) as DuelistDrawnCard;

// from: ../dojo/src/types/misc.cairo
export enum Boolean {
  Undefined = 'Undefined',
  True = 'True',
  False = 'False',
};
export const BooleanNameToValue: Record<Boolean, number> = {
  [Boolean.Undefined]: 0,
  [Boolean.True]: 1,
  [Boolean.False]: 2,
};
export const getBooleanValue = (name: Boolean): number => (BooleanNameToValue[name as string]);
export const getBooleanFromValue = (value: number): Boolean => Object.keys(BooleanNameToValue).find(key => BooleanNameToValue[key] === value) as Boolean;

// from: ../dojo/src/types/premise.cairo
export enum Premise {
  Null = 'Null',
  Matter = 'Matter',
  Debt = 'Debt',
  Dispute = 'Dispute',
  Honour = 'Honour',
  Hatred = 'Hatred',
  Blood = 'Blood',
  Nothing = 'Nothing',
  Tournament = 'Tournament',
};
export const PremiseNameToValue: Record<Premise, number> = {
  [Premise.Null]: 0,
  [Premise.Matter]: 1,
  [Premise.Debt]: 2,
  [Premise.Dispute]: 3,
  [Premise.Honour]: 4,
  [Premise.Hatred]: 5,
  [Premise.Blood]: 6,
  [Premise.Nothing]: 7,
  [Premise.Tournament]: 8,
};
export const getPremiseValue = (name: Premise): number => (PremiseNameToValue[name as string]);
export const getPremiseFromValue = (value: number): Premise => Object.keys(PremiseNameToValue).find(key => PremiseNameToValue[key] === value) as Premise;

// from: ../dojo/src/types/round_state.cairo
export enum RoundState {
  Null = 'Null',
  Commit = 'Commit',
  Reveal = 'Reveal',
  Finished = 'Finished',
};
export const RoundStateNameToValue: Record<RoundState, number> = {
  [RoundState.Null]: 0,
  [RoundState.Commit]: 1,
  [RoundState.Reveal]: 2,
  [RoundState.Finished]: 3,
};
export const getRoundStateValue = (name: RoundState): number => (RoundStateNameToValue[name as string]);
export const getRoundStateFromValue = (value: number): RoundState => Object.keys(RoundStateNameToValue).find(key => RoundStateNameToValue[key] === value) as RoundState;

//
// constants
//

// from: ../dojo/src/types/cards/cards.cairo
export type CardPoints = {
  name : string,
  self_chances : number,
  self_damage : number,
  other_chances : number,
  other_damage : number,
  special : string,
};

// from: ../dojo/src/types/cards/cards.cairo
export type EnvCardPoints = {
  name : string,
  rarity : Rarity,
  chances : number,
  damage : number,
  one_step : boolean,
  tactics_multiplier : number,
};

// from: ../dojo/src/interfaces/systems.cairo
type type_SELECTORS = {
  ADMIN: BigNumberish, // cairo: felt252
  ACTIONS: BigNumberish, // cairo: felt252
  RNG: BigNumberish, // cairo: felt252
  MINTER: BigNumberish, // cairo: felt252
  TOKEN_DUELIST: BigNumberish, // cairo: felt252
  LORDS_MOCK: BigNumberish, // cairo: felt252
  CONFIG: BigNumberish, // cairo: felt252
  TABLE_CONFIG: BigNumberish, // cairo: felt252
  TOKEN_CONFIG: BigNumberish, // cairo: felt252
};
export const SELECTORS: type_SELECTORS = {
  ADMIN: '0x036fd20372b5d47c092e2fede52897075978efb732aeaeb155d19eb8147f6497', // 'selector_from_tag!("pistols-admin")'
  ACTIONS: '0x04f10cff77842b589eafef9f3261c4cb207e41302e7ac01527cff88ad26ded3e', // 'selector_from_tag!("pistols-actions")'
  RNG: '0x013f1a6a9ae118440a997d6624230b59f43516220a1208526c3f66e202910504', // 'selector_from_tag!("pistols-rng")'
  MINTER: '0x07b759538267ac8937772e5bdadb6b598748b33c377c90426fc0a4960234de20', // 'selector_from_tag!("pistols-minter")'
  TOKEN_DUELIST: '0x0541e9c1813eb1f7867062ea0fafcd949ad9d3f8b212bbac1df80c48947c48cd', // 'selector_from_tag!("pistols-token_duelist")'
  LORDS_MOCK: '0x02b1156e63a09854c3d8dba0cad93b41e1fc4662466a0ffc2a9ec9e54b4bc788', // 'selector_from_tag!("pistols-lords_mock")'
  CONFIG: '0x060742fa7259b7ce3ebc0a2dde90b740d1234c770199a822fa2e7cf779dc0392', // 'selector_from_tag!("pistols-Config")'
  TABLE_CONFIG: '0x01e8368fc88328662c92a11c0e739bf8b74bcd77a20071d2641a31e1a063c138', // 'selector_from_tag!("pistols-TableConfig")'
  TOKEN_CONFIG: '0x056ebd3387f45e8b292b472f3539e675031f12cf156c07c309c6403044f71fed', // 'selector_from_tag!("pistols-TokenConfig")'
};

// from: ../dojo/src/models/config.cairo
type type_CONFIG = {
  CONFIG_KEY: number, // cairo: u8
};
export const CONFIG: type_CONFIG = {
  CONFIG_KEY: 1,
};

// from: ../dojo/src/models/table.cairo
type type_TABLES = {
  LORDS: string, // cairo: felt252
  COMMONERS: string, // cairo: felt252
};
export const TABLES: type_TABLES = {
  LORDS: 'Lords',
  COMMONERS: 'Commoners',
};

// from: ../dojo/src/types/cards/blades.cairo
type type_BLADES_CARDS = {
  NONE: number, // cairo: u8
  SEPPUKU: number, // cairo: u8
  RUN_AWAY: number, // cairo: u8
  BEHEAD: number, // cairo: u8
  GRAPPLE: number, // cairo: u8
};
export const BLADES_CARDS: type_BLADES_CARDS = {
  NONE: 0,
  SEPPUKU: 1,
  RUN_AWAY: 2,
  BEHEAD: 3,
  GRAPPLE: 4,
};

// from: ../dojo/src/types/cards/blades.cairo
type type_BLADES_POINTS = {
  SEPPUKU: CardPoints, // cairo: CardPoints
  RUN_AWAY: CardPoints, // cairo: CardPoints
  BEHEAD: CardPoints, // cairo: CardPoints
  GRAPPLE: CardPoints, // cairo: CardPoints
};
export const BLADES_POINTS: type_BLADES_POINTS = {
  SEPPUKU: {
    name: 'Seppuku',
    self_chances: 20,
    self_damage: 1,
    other_chances: 0,
    other_damage: 0,
    special: 'Suicide if survives',
  },
  RUN_AWAY: {
    name: 'Run Away',
    self_chances: 0,
    self_damage: 0,
    other_chances: -10,
    other_damage: 0,
    special: 'Beats Behead',
  },
  BEHEAD: {
    name: 'Behead',
    self_chances: 0,
    self_damage: 1,
    other_chances: 0,
    other_damage: 0,
    special: 'Beats Grapple',
  },
  GRAPPLE: {
    name: 'Grapple',
    self_chances: 0,
    self_damage: 0,
    other_chances: 0,
    other_damage: -1,
    special: 'Beats Run Away',
  },
};

// from: ../dojo/src/types/cards/env.cairo
type type_ENV_CARDS = {
  NONE: number, // cairo: u8
  DAMAGE_UP: number, // cairo: u8
  DAMAGE_DOWN: number, // cairo: u8
  CHANCES_UP: number, // cairo: u8
  CHANCES_DOWN: number, // cairo: u8
  DOUBLE_DAMAGE_UP: number, // cairo: u8
  DOUBLE_CHANCES_UP: number, // cairo: u8
  SPECIAL_ALL_SHOTS_HIT: number, // cairo: u8
  SPECIAL_ALL_SHOTS_MISS: number, // cairo: u8
  SPECIAL_DOUBLE_TACTICS: number, // cairo: u8
  SPECIAL_NO_TACTICS: number, // cairo: u8
};
export const ENV_CARDS: type_ENV_CARDS = {
  NONE: 0,
  DAMAGE_UP: 1,
  DAMAGE_DOWN: 2,
  CHANCES_UP: 3,
  CHANCES_DOWN: 4,
  DOUBLE_DAMAGE_UP: 5,
  DOUBLE_CHANCES_UP: 7,
  SPECIAL_ALL_SHOTS_HIT: 9,
  SPECIAL_ALL_SHOTS_MISS: 10,
  SPECIAL_DOUBLE_TACTICS: 11,
  SPECIAL_NO_TACTICS: 12,
};

// from: ../dojo/src/types/cards/env.cairo
type type_ENV_POINTS = {
  DAMAGE_UP: EnvCardPoints, // cairo: EnvCardPoints
  DAMAGE_DOWN: EnvCardPoints, // cairo: EnvCardPoints
  CHANCES_UP: EnvCardPoints, // cairo: EnvCardPoints
  CHANCES_DOWN: EnvCardPoints, // cairo: EnvCardPoints
  DOUBLE_DAMAGE_UP: EnvCardPoints, // cairo: EnvCardPoints
  DOUBLE_CHANCES_UP: EnvCardPoints, // cairo: EnvCardPoints
  SPECIAL_ALL_SHOTS_HIT: EnvCardPoints, // cairo: EnvCardPoints
  SPECIAL_ALL_SHOTS_MISS: EnvCardPoints, // cairo: EnvCardPoints
  SPECIAL_DOUBLE_TACTICS: EnvCardPoints, // cairo: EnvCardPoints
  SPECIAL_NO_TACTICS: EnvCardPoints, // cairo: EnvCardPoints
};
export const ENV_POINTS: type_ENV_POINTS = {
  DAMAGE_UP: {
    name: 'Damage Up',
    rarity: Rarity.Common,
    chances: 0,
    damage: 1,
    one_step: false,
    tactics_multiplier: 1,
  },
  DAMAGE_DOWN: {
    name: 'Damage Down',
    rarity: Rarity.Common,
    chances: 0,
    damage: -1,
    one_step: false,
    tactics_multiplier: 1,
  },
  CHANCES_UP: {
    name: 'Chances Up',
    rarity: Rarity.Common,
    chances: 10,
    damage: 0,
    one_step: false,
    tactics_multiplier: 1,
  },
  CHANCES_DOWN: {
    name: 'Chances Down',
    rarity: Rarity.Common,
    chances: -10,
    damage: 0,
    one_step: false,
    tactics_multiplier: 1,
  },
  DOUBLE_DAMAGE_UP: {
    name: 'Double Damage Up',
    rarity: Rarity.Uncommon,
    chances: 0,
    damage: 2,
    one_step: false,
    tactics_multiplier: 1,
  },
  DOUBLE_CHANCES_UP: {
    name: 'Double Chances Up',
    rarity: Rarity.Uncommon,
    chances: 20,
    damage: 0,
    one_step: false,
    tactics_multiplier: 1,
  },
  SPECIAL_ALL_SHOTS_HIT: {
    name: 'All Shots Hit',
    rarity: Rarity.Special,
    chances: 100,
    damage: 100,
    one_step: true,
    tactics_multiplier: 1,
  },
  SPECIAL_ALL_SHOTS_MISS: {
    name: 'All Shots Miss',
    rarity: Rarity.Special,
    chances: -100,
    damage: -100,
    one_step: true,
    tactics_multiplier: 1,
  },
  SPECIAL_DOUBLE_TACTICS: {
    name: 'Double Tactics',
    rarity: Rarity.Special,
    chances: 0,
    damage: 0,
    one_step: true,
    tactics_multiplier: 2,
  },
  SPECIAL_NO_TACTICS: {
    name: 'No Tactics',
    rarity: Rarity.Special,
    chances: 0,
    damage: 0,
    one_step: true,
    tactics_multiplier: 0,
  },
};

// from: ../dojo/src/types/cards/paces.cairo
type type_PACES_CARDS = {
  None: number, // cairo: u8
  PACES_1: number, // cairo: u8
  PACES_2: number, // cairo: u8
  PACES_3: number, // cairo: u8
  PACES_4: number, // cairo: u8
  PACES_5: number, // cairo: u8
  PACES_6: number, // cairo: u8
  PACES_7: number, // cairo: u8
  PACES_8: number, // cairo: u8
  PACES_9: number, // cairo: u8
  PACES_10: number, // cairo: u8
};
export const PACES_CARDS: type_PACES_CARDS = {
  None: 0,
  PACES_1: 1,
  PACES_2: 2,
  PACES_3: 3,
  PACES_4: 4,
  PACES_5: 5,
  PACES_6: 6,
  PACES_7: 7,
  PACES_8: 8,
  PACES_9: 9,
  PACES_10: 10,
};

// from: ../dojo/src/types/cards/tactics.cairo
type type_TACTICS_CARDS = {
  NONE: number, // cairo: u8
  INSULT: number, // cairo: u8
  COIN_TOSS: number, // cairo: u8
  VENGEFUL: number, // cairo: u8
  THICK_COAT: number, // cairo: u8
  REVERSAL: number, // cairo: u8
  BANANAS: number, // cairo: u8
};
export const TACTICS_CARDS: type_TACTICS_CARDS = {
  NONE: 0,
  INSULT: 1,
  COIN_TOSS: 2,
  VENGEFUL: 3,
  THICK_COAT: 4,
  REVERSAL: 5,
  BANANAS: 6,
};

// from: ../dojo/src/types/cards/tactics.cairo
type type_TACTICS_POINTS = {
  INSULT: CardPoints, // cairo: CardPoints
  COIN_TOSS: CardPoints, // cairo: CardPoints
  VENGEFUL: CardPoints, // cairo: CardPoints
  THICK_COAT: CardPoints, // cairo: CardPoints
  REVERSAL: CardPoints, // cairo: CardPoints
  BANANAS: CardPoints, // cairo: CardPoints
};
export const TACTICS_POINTS: type_TACTICS_POINTS = {
  INSULT: {
    name: 'Insult',
    self_chances: 0,
    self_damage: 0,
    other_chances: -10,
    other_damage: 1,
    special: '',
  },
  COIN_TOSS: {
    name: 'Coin Toss',
    self_chances: 0,
    self_damage: 0,
    other_chances: 0,
    other_damage: 0,
    special: 'First special doesnt affect you',
  },
  VENGEFUL: {
    name: 'Vengeful',
    self_chances: 0,
    self_damage: 1,
    other_chances: 0,
    other_damage: 0,
    special: '',
  },
  THICK_COAT: {
    name: 'Thick Coat',
    self_chances: 0,
    self_damage: 0,
    other_chances: 0,
    other_damage: -1,
    special: '',
  },
  REVERSAL: {
    name: 'Reversal',
    self_chances: 0,
    self_damage: 0,
    other_chances: 0,
    other_damage: 0,
    special: 'Next decrease increases both',
  },
  BANANAS: {
    name: 'Bananas',
    self_chances: -10,
    self_damage: 0,
    other_chances: -10,
    other_damage: 0,
    special: '',
  },
};

// from: ../dojo/src/types/challenge_state.cairo
type type_CHALLENGE_STATE = {
  NULL: number, // cairo: u8
  AWAITING: number, // cairo: u8
  WITHDRAWN: number, // cairo: u8
  REFUSED: number, // cairo: u8
  EXPIRED: number, // cairo: u8
  IN_PROGRESS: number, // cairo: u8
  RESOLVED: number, // cairo: u8
  DRAW: number, // cairo: u8
};
export const CHALLENGE_STATE: type_CHALLENGE_STATE = {
  NULL: 0,
  AWAITING: 1,
  WITHDRAWN: 2,
  REFUSED: 3,
  EXPIRED: 4,
  IN_PROGRESS: 5,
  RESOLVED: 6,
  DRAW: 7,
};

// from: ../dojo/src/types/constants.cairo
type type_CONST = {
  ROUND_COUNT: number, // cairo: u8
  MAX_DUELIST_ID: BigNumberish, // cairo: u128
  FULL_HEALTH: number, // cairo: u8
  DOUBLE_DAMAGE: number, // cairo: u8
  SINGLE_DAMAGE: number, // cairo: u8
  INITIAL_CHANCE: number, // cairo: u8
  INITIAL_DAMAGE: number, // cairo: u8
  ETH_TO_WEI: BigNumberish, // cairo: u256
};
export const CONST: type_CONST = {
  ROUND_COUNT: 1,
  MAX_DUELIST_ID: '0xffff',
  FULL_HEALTH: 3,
  DOUBLE_DAMAGE: 2,
  SINGLE_DAMAGE: 1,
  INITIAL_CHANCE: 50,
  INITIAL_DAMAGE: 1,
  ETH_TO_WEI: '1_000_000_000_000_000_000',
};

// from: ../dojo/src/types/constants.cairo
type type_HONOUR = {
  VILLAIN_START: number, // cairo: u8
  TRICKSTER_START: number, // cairo: u8
  LORD_START: number, // cairo: u8
  HALFWAY: number, // cairo: u8
  MAX: number, // cairo: u8
  LEVEL_MIN: number, // cairo: u8
  LEVEL_MAX: number, // cairo: u8
};
export const HONOUR: type_HONOUR = {
  VILLAIN_START: 10,
  TRICKSTER_START: 35,
  LORD_START: 75,
  HALFWAY: 50,
  MAX: 100,
  LEVEL_MIN: 10,
  LEVEL_MAX: 100,
};

// from: ../dojo/src/types/constants.cairo
type type_CHANCES = {
  NEVER: number, // cairo: u8
  ALWAYS: number, // cairo: u8
};
export const CHANCES: type_CHANCES = {
  NEVER: 0,
  ALWAYS: 100,
};

// from: ../dojo/src/types/events.cairo
type type_EVENT_SELECTOR = {
  DuelistRegisteredEvent: BigNumberish, // cairo: felt252
  NewChallengeEvent: BigNumberish, // cairo: felt252
  ChallengeAcceptedEvent: BigNumberish, // cairo: felt252
  ChallengeResolvedEvent: BigNumberish, // cairo: felt252
  DuelistTurnEvent: BigNumberish, // cairo: felt252
};
export const EVENT_SELECTOR: type_EVENT_SELECTOR = {
  DuelistRegisteredEvent: '0x148c3db21a55576bc012023dc4d3b5bd570c519de855849eac52b1c5d6c9e85',
  NewChallengeEvent: '0x14a0df74df51e02ef8dedabfd1ea9684ea2087bed6370e881b156d7e2e56975',
  ChallengeAcceptedEvent: '0x31cdbf7ac39747303190a727df1a270ae5e4f05191f6f58e452ce4eb1e98abe',
  ChallengeResolvedEvent: '0x23dfe05a8414fd8464370e120099be69327b2a52ae6655ff23733651e8281b1',
  DuelistTurnEvent: '0x19556e1418f1e7a7e6962eff75d1a46abd50bda431139f855ba85c9119754a4',
};

// from: ../dojo/src/types/round_state.cairo
type type_ROUND_STATE = {
  NULL: number, // cairo: u8
  COMMIT: number, // cairo: u8
  REVEAL: number, // cairo: u8
  FINISHED: number, // cairo: u8
};
export const ROUND_STATE: type_ROUND_STATE = {
  NULL: 0,
  COMMIT: 1,
  REVEAL: 2,
  FINISHED: 3,
};

// from: ../dojo/src/types/typed_data.cairo
type type_TYPED_DATA = {
  NAME: string, // cairo: felt252
  VERSION: string, // cairo: felt252
  COMMIT_MOVE_MESSAGE_TYPE_HASH: BigNumberish, // cairo: felt252
};
export const TYPED_DATA: type_TYPED_DATA = {
  NAME: 'Underware',
  VERSION: '0.1.0',
  COMMIT_MOVE_MESSAGE_TYPE_HASH: '0x74fe0c723488214ab442c24761e9b32d30216def5e93d1c110375d993482ae',
};

// from: ../dojo/src/utils/bitwise.cairo
type type_BITWISE = {
  MAX_U8: number, // cairo: u8
  MAX_U16: number, // cairo: u16
  MAX_U32: number, // cairo: u32
  MAX_U64: BigNumberish, // cairo: u64
  MAX_U128: BigNumberish, // cairo: u128
  MAX_U256: BigNumberish, // cairo: u256
  MSB_U8: number, // cairo: u8
  MSB_U16: number, // cairo: u16
  MSB_U32: number, // cairo: u32
  MSB_U64: BigNumberish, // cairo: u64
  MSB_U128: BigNumberish, // cairo: u128
  MSB_U256: BigNumberish, // cairo: u256
};
export const BITWISE: type_BITWISE = {
  MAX_U8: 0xff,
  MAX_U16: 0xffff,
  MAX_U32: 0xffffffff,
  MAX_U64: '0xffffffffffffffff',
  MAX_U128: '0xffffffffffffffffffffffffffffffff',
  MAX_U256: '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',
  MSB_U8: 0x80,
  MSB_U16: 0x8000,
  MSB_U32: 0x80000000,
  MSB_U64: '0x8000000000000000',
  MSB_U128: '0x80000000000000000000000000000000',
  MSB_U256: '0x8000000000000000000000000000000000000000000000000000000000000000',
};
