schema {
  query: World__Query
  subscription: World__Subscription
}

scalar ByteArray

scalar ContractAddress

scalar Cursor

scalar DateTime

type ERC__Balance {
  balance: String!
  type: String!
  tokenMetadata: ERC__Token!
}

type ERC__Token {
  name: String!
  symbol: String!
  tokenId: String!
  decimals: String!
  contractAddress: String!
}

type ERC__Transfer {
  from: String!
  to: String!
  amount: String!
  type: String!
  executedAt: String!
  tokenMetadata: ERC__Token!
  transactionHash: String!
}

scalar Enum

union ModelUnion =
    pistols_Challenge
  | pistols_CoinConfig
  | pistols_Config
  | pistols_Duelist
  | pistols_Pact
  | pistols_Round
  | pistols_Scoreboard
  | pistols_TableAdmittance
  | pistols_TableConfig
  | pistols_TableWager
  | pistols_TokenConfig
  | pistols_Wager

enum OrderDirection {
  ASC
  DESC
}

type World__Content {
  name: String
  description: String
  website: String
  iconUri: String
  coverUri: String
  socials: [World__Social]
}

type World__Entity {
  id: ID
  keys: [String]
  eventId: String
  executedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  models: [ModelUnion]
}

type World__EntityConnection {
  edges: [World__EntityEdge]
  totalCount: Int!
  pageInfo: World__PageInfo!
}

type World__EntityEdge {
  node: World__Entity
  cursor: Cursor
}

type World__Event {
  id: ID
  keys: [String]
  data: [String]
  executedAt: DateTime
  createdAt: DateTime
  transactionHash: String
}

type World__EventConnection {
  edges: [World__EventEdge]
  totalCount: Int!
  pageInfo: World__PageInfo!
}

type World__EventEdge {
  node: World__Event
  cursor: Cursor
}

type World__EventMessage {
  id: ID
  keys: [String]
  eventId: String
  executedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  models: [ModelUnion]
}

type World__EventMessageConnection {
  edges: [World__EventMessageEdge]
  totalCount: Int!
  pageInfo: World__PageInfo!
}

type World__EventMessageEdge {
  node: World__EventMessage
  cursor: Cursor
}

type World__Metadata {
  id: ID
  uri: String
  worldAddress: String!
  content: World__Content
  iconImg: String
  coverImg: String
  executedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
}

type World__MetadataConnection {
  edges: [World__MetadataEdge]
  totalCount: Int!
  pageInfo: World__PageInfo!
}

type World__MetadataEdge {
  node: World__Metadata
  cursor: Cursor
}

type World__Model {
  id: ID
  name: String
  namespace: String
  classHash: felt252
  contractAddress: felt252
  transactionHash: felt252
  executedAt: DateTime
  createdAt: DateTime
}

type World__ModelConnection {
  edges: [World__ModelEdge]
  totalCount: Int!
  pageInfo: World__PageInfo!
}

type World__ModelEdge {
  node: World__Model
  cursor: Cursor
}

input World__ModelOrder {
  direction: OrderDirection!
  field: World__ModelOrderField!
}

enum World__ModelOrderField {
  NAME
  CLASS_HASH
}

type World__PageInfo {
  hasPreviousPage: Boolean
  hasNextPage: Boolean
  startCursor: Cursor
  endCursor: Cursor
}

type World__Query {
  entity(id: ID!): World__Entity!
  entities(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    offset: Int
    limit: Int
    keys: [String]
  ): World__EntityConnection
  eventMessage(id: ID!): World__EventMessage!
  eventMessages(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    offset: Int
    limit: Int
    keys: [String]
  ): World__EventMessageConnection
  events(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    offset: Int
    limit: Int
    keys: [String]
  ): World__EventConnection
  metadatas(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    offset: Int
    limit: Int
  ): World__MetadataConnection
  model(id: ID!): World__Model!
  models(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    offset: Int
    limit: Int
    order: World__ModelOrder
  ): World__ModelConnection
  transaction(transactionHash: ID!): World__Transaction!
  transactions(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    offset: Int
    limit: Int
  ): World__TransactionConnection
  ercBalance(accountAddress: String!): [ERC__Balance]
  ercTransfer(accountAddress: String!, limit: Int!): [ERC__Transfer]
  pistolsChallengeModels(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    offset: Int
    limit: Int
    where: pistols_ChallengeWhereInput
    order: pistols_ChallengeOrder
  ): pistols_ChallengeConnection
  pistolsCoinConfigModels(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    offset: Int
    limit: Int
    where: pistols_CoinConfigWhereInput
    order: pistols_CoinConfigOrder
  ): pistols_CoinConfigConnection
  pistolsConfigModels(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    offset: Int
    limit: Int
    where: pistols_ConfigWhereInput
    order: pistols_ConfigOrder
  ): pistols_ConfigConnection
  pistolsDuelistModels(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    offset: Int
    limit: Int
    where: pistols_DuelistWhereInput
    order: pistols_DuelistOrder
  ): pistols_DuelistConnection
  pistolsPactModels(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    offset: Int
    limit: Int
    where: pistols_PactWhereInput
    order: pistols_PactOrder
  ): pistols_PactConnection
  pistolsRoundModels(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    offset: Int
    limit: Int
    where: pistols_RoundWhereInput
    order: pistols_RoundOrder
  ): pistols_RoundConnection
  pistolsScoreboardModels(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    offset: Int
    limit: Int
    where: pistols_ScoreboardWhereInput
    order: pistols_ScoreboardOrder
  ): pistols_ScoreboardConnection
  pistolsTableAdmittanceModels(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    offset: Int
    limit: Int
    where: pistols_TableAdmittanceWhereInput
    order: pistols_TableAdmittanceOrder
  ): pistols_TableAdmittanceConnection
  pistolsTableConfigModels(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    offset: Int
    limit: Int
    where: pistols_TableConfigWhereInput
    order: pistols_TableConfigOrder
  ): pistols_TableConfigConnection
  pistolsTableWagerModels(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    offset: Int
    limit: Int
    where: pistols_TableWagerWhereInput
    order: pistols_TableWagerOrder
  ): pistols_TableWagerConnection
  pistolsTokenConfigModels(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    offset: Int
    limit: Int
    where: pistols_TokenConfigWhereInput
    order: pistols_TokenConfigOrder
  ): pistols_TokenConfigConnection
  pistolsWagerModels(
    first: Int
    last: Int
    before: Cursor
    after: Cursor
    offset: Int
    limit: Int
    where: pistols_WagerWhereInput
    order: pistols_WagerOrder
  ): pistols_WagerConnection
}

type World__Social {
  name: String
  url: String
}

type World__Subscription {
  entityUpdated(id: ID): World__Entity!
  eventMessageUpdated(id: ID): World__EventMessage!
  eventEmitted(keys: [String]): World__Event!
  modelRegistered(id: ID): World__Model!
}

type World__Transaction {
  id: ID
  transactionHash: felt252
  senderAddress: felt252
  calldata: [felt252]
  maxFee: felt252
  signature: [felt252]
  nonce: felt252
  executedAt: DateTime
  createdAt: DateTime
}

type World__TransactionConnection {
  edges: [World__TransactionEdge]
  totalCount: Int!
  pageInfo: World__PageInfo!
}

type World__TransactionEdge {
  node: World__Transaction
  cursor: Cursor
}

scalar bool

scalar felt252

type pistols_Challenge {
  duel_id: u128
  table_id: felt252
  premise: Enum
  quote: felt252
  address_a: ContractAddress
  address_b: ContractAddress
  duelist_id_a: u128
  duelist_id_b: u128
  state: Enum
  round_number: u8
  winner: u8
  timestamp_start: u64
  timestamp_end: u64
  entity: World__Entity
  eventMessage: World__EventMessage
}

type pistols_ChallengeConnection {
  edges: [pistols_ChallengeEdge]
  totalCount: Int!
  pageInfo: World__PageInfo!
}

type pistols_ChallengeEdge {
  node: pistols_Challenge
  cursor: Cursor
}

input pistols_ChallengeOrder {
  direction: OrderDirection!
  field: pistols_ChallengeOrderField!
}

enum pistols_ChallengeOrderField {
  DUEL_ID
  TABLE_ID
  PREMISE
  QUOTE
  ADDRESS_A
  ADDRESS_B
  DUELIST_ID_A
  DUELIST_ID_B
  STATE
  ROUND_NUMBER
  WINNER
  TIMESTAMP_START
  TIMESTAMP_END
}

input pistols_ChallengeWhereInput {
  duel_id: u128
  duel_idGT: u128
  duel_idGTE: u128
  duel_idLT: u128
  duel_idLTE: u128
  duel_idNEQ: u128
  duel_idEQ: u128
  duel_idNOTIN: [u128]
  duel_idIN: [u128]
  duel_idNOTLIKE: u128
  duel_idLIKE: u128
  table_id: felt252
  table_idGT: felt252
  table_idGTE: felt252
  table_idLT: felt252
  table_idLTE: felt252
  table_idNEQ: felt252
  table_idEQ: felt252
  table_idNOTIN: [felt252]
  table_idIN: [felt252]
  table_idNOTLIKE: felt252
  table_idLIKE: felt252
  premise: Enum
  quote: felt252
  quoteGT: felt252
  quoteGTE: felt252
  quoteLT: felt252
  quoteLTE: felt252
  quoteNEQ: felt252
  quoteEQ: felt252
  quoteNOTIN: [felt252]
  quoteIN: [felt252]
  quoteNOTLIKE: felt252
  quoteLIKE: felt252
  address_a: ContractAddress
  address_aGT: ContractAddress
  address_aGTE: ContractAddress
  address_aLT: ContractAddress
  address_aLTE: ContractAddress
  address_aNEQ: ContractAddress
  address_aEQ: ContractAddress
  address_aNOTIN: [ContractAddress]
  address_aIN: [ContractAddress]
  address_aNOTLIKE: ContractAddress
  address_aLIKE: ContractAddress
  address_b: ContractAddress
  address_bGT: ContractAddress
  address_bGTE: ContractAddress
  address_bLT: ContractAddress
  address_bLTE: ContractAddress
  address_bNEQ: ContractAddress
  address_bEQ: ContractAddress
  address_bNOTIN: [ContractAddress]
  address_bIN: [ContractAddress]
  address_bNOTLIKE: ContractAddress
  address_bLIKE: ContractAddress
  duelist_id_a: u128
  duelist_id_aGT: u128
  duelist_id_aGTE: u128
  duelist_id_aLT: u128
  duelist_id_aLTE: u128
  duelist_id_aNEQ: u128
  duelist_id_aEQ: u128
  duelist_id_aNOTIN: [u128]
  duelist_id_aIN: [u128]
  duelist_id_aNOTLIKE: u128
  duelist_id_aLIKE: u128
  duelist_id_b: u128
  duelist_id_bGT: u128
  duelist_id_bGTE: u128
  duelist_id_bLT: u128
  duelist_id_bLTE: u128
  duelist_id_bNEQ: u128
  duelist_id_bEQ: u128
  duelist_id_bNOTIN: [u128]
  duelist_id_bIN: [u128]
  duelist_id_bNOTLIKE: u128
  duelist_id_bLIKE: u128
  state: Enum
  round_number: u8
  round_numberGT: u8
  round_numberGTE: u8
  round_numberLT: u8
  round_numberLTE: u8
  round_numberNEQ: u8
  round_numberEQ: u8
  round_numberNOTIN: [u8]
  round_numberIN: [u8]
  round_numberNOTLIKE: u8
  round_numberLIKE: u8
  winner: u8
  winnerGT: u8
  winnerGTE: u8
  winnerLT: u8
  winnerLTE: u8
  winnerNEQ: u8
  winnerEQ: u8
  winnerNOTIN: [u8]
  winnerIN: [u8]
  winnerNOTLIKE: u8
  winnerLIKE: u8
  timestamp_start: u64
  timestamp_startGT: u64
  timestamp_startGTE: u64
  timestamp_startLT: u64
  timestamp_startLTE: u64
  timestamp_startNEQ: u64
  timestamp_startEQ: u64
  timestamp_startNOTIN: [u64]
  timestamp_startIN: [u64]
  timestamp_startNOTLIKE: u64
  timestamp_startLIKE: u64
  timestamp_end: u64
  timestamp_endGT: u64
  timestamp_endGTE: u64
  timestamp_endLT: u64
  timestamp_endLTE: u64
  timestamp_endNEQ: u64
  timestamp_endEQ: u64
  timestamp_endNOTIN: [u64]
  timestamp_endIN: [u64]
  timestamp_endNOTLIKE: u64
  timestamp_endLIKE: u64
}

type pistols_CoinConfig {
  coin_address: ContractAddress
  minter_address: ContractAddress
  faucet_amount: u128
  entity: World__Entity
  eventMessage: World__EventMessage
}

type pistols_CoinConfigConnection {
  edges: [pistols_CoinConfigEdge]
  totalCount: Int!
  pageInfo: World__PageInfo!
}

type pistols_CoinConfigEdge {
  node: pistols_CoinConfig
  cursor: Cursor
}

input pistols_CoinConfigOrder {
  direction: OrderDirection!
  field: pistols_CoinConfigOrderField!
}

enum pistols_CoinConfigOrderField {
  COIN_ADDRESS
  MINTER_ADDRESS
  FAUCET_AMOUNT
}

input pistols_CoinConfigWhereInput {
  coin_address: ContractAddress
  coin_addressGT: ContractAddress
  coin_addressGTE: ContractAddress
  coin_addressLT: ContractAddress
  coin_addressLTE: ContractAddress
  coin_addressNEQ: ContractAddress
  coin_addressEQ: ContractAddress
  coin_addressNOTIN: [ContractAddress]
  coin_addressIN: [ContractAddress]
  coin_addressNOTLIKE: ContractAddress
  coin_addressLIKE: ContractAddress
  minter_address: ContractAddress
  minter_addressGT: ContractAddress
  minter_addressGTE: ContractAddress
  minter_addressLT: ContractAddress
  minter_addressLTE: ContractAddress
  minter_addressNEQ: ContractAddress
  minter_addressEQ: ContractAddress
  minter_addressNOTIN: [ContractAddress]
  minter_addressIN: [ContractAddress]
  minter_addressNOTLIKE: ContractAddress
  minter_addressLIKE: ContractAddress
  faucet_amount: u128
  faucet_amountGT: u128
  faucet_amountGTE: u128
  faucet_amountLT: u128
  faucet_amountLTE: u128
  faucet_amountNEQ: u128
  faucet_amountEQ: u128
  faucet_amountNOTIN: [u128]
  faucet_amountIN: [u128]
  faucet_amountNOTLIKE: u128
  faucet_amountLIKE: u128
}

type pistols_Config {
  key: u8
  treasury_address: ContractAddress
  is_paused: bool
  entity: World__Entity
  eventMessage: World__EventMessage
}

type pistols_ConfigConnection {
  edges: [pistols_ConfigEdge]
  totalCount: Int!
  pageInfo: World__PageInfo!
}

type pistols_ConfigEdge {
  node: pistols_Config
  cursor: Cursor
}

input pistols_ConfigOrder {
  direction: OrderDirection!
  field: pistols_ConfigOrderField!
}

enum pistols_ConfigOrderField {
  KEY
  TREASURY_ADDRESS
  IS_PAUSED
}

input pistols_ConfigWhereInput {
  key: u8
  keyGT: u8
  keyGTE: u8
  keyLT: u8
  keyLTE: u8
  keyNEQ: u8
  keyEQ: u8
  keyNOTIN: [u8]
  keyIN: [u8]
  keyNOTLIKE: u8
  keyLIKE: u8
  treasury_address: ContractAddress
  treasury_addressGT: ContractAddress
  treasury_addressGTE: ContractAddress
  treasury_addressLT: ContractAddress
  treasury_addressLTE: ContractAddress
  treasury_addressNEQ: ContractAddress
  treasury_addressEQ: ContractAddress
  treasury_addressNOTIN: [ContractAddress]
  treasury_addressIN: [ContractAddress]
  treasury_addressNOTLIKE: ContractAddress
  treasury_addressLIKE: ContractAddress
  is_paused: bool
}

type pistols_Duelist {
  duelist_id: u128
  name: felt252
  profile_pic_uri: ByteArray
  profile_pic_type: Enum
  timestamp: u64
  score: pistols_Duelist_Score
  entity: World__Entity
  eventMessage: World__EventMessage
}

type pistols_DuelistConnection {
  edges: [pistols_DuelistEdge]
  totalCount: Int!
  pageInfo: World__PageInfo!
}

type pistols_DuelistEdge {
  node: pistols_Duelist
  cursor: Cursor
}

input pistols_DuelistOrder {
  direction: OrderDirection!
  field: pistols_DuelistOrderField!
}

enum pistols_DuelistOrderField {
  DUELIST_ID
  NAME
  PROFILE_PIC_URI
  PROFILE_PIC_TYPE
  TIMESTAMP
  SCORE
}

input pistols_DuelistWhereInput {
  duelist_id: u128
  duelist_idGT: u128
  duelist_idGTE: u128
  duelist_idLT: u128
  duelist_idLTE: u128
  duelist_idNEQ: u128
  duelist_idEQ: u128
  duelist_idNOTIN: [u128]
  duelist_idIN: [u128]
  duelist_idNOTLIKE: u128
  duelist_idLIKE: u128
  name: felt252
  nameGT: felt252
  nameGTE: felt252
  nameLT: felt252
  nameLTE: felt252
  nameNEQ: felt252
  nameEQ: felt252
  nameNOTIN: [felt252]
  nameIN: [felt252]
  nameNOTLIKE: felt252
  nameLIKE: felt252
  profile_pic_uri: ByteArray
  profile_pic_uriGT: ByteArray
  profile_pic_uriGTE: ByteArray
  profile_pic_uriLT: ByteArray
  profile_pic_uriLTE: ByteArray
  profile_pic_uriNEQ: ByteArray
  profile_pic_uriEQ: ByteArray
  profile_pic_uriNOTIN: [ByteArray]
  profile_pic_uriIN: [ByteArray]
  profile_pic_uriNOTLIKE: ByteArray
  profile_pic_uriLIKE: ByteArray
  profile_pic_type: Enum
  timestamp: u64
  timestampGT: u64
  timestampGTE: u64
  timestampLT: u64
  timestampLTE: u64
  timestampNEQ: u64
  timestampEQ: u64
  timestampNOTIN: [u64]
  timestampIN: [u64]
  timestampNOTLIKE: u64
  timestampLIKE: u64
}

type pistols_Duelist_Score {
  honour: u8
  level_villain: u8
  level_trickster: u8
  level_lord: u8
  total_duels: u16
  total_wins: u16
  total_losses: u16
  total_draws: u16
  honour_history: u64
}

type pistols_Pact {
  table_id: felt252
  pair: u128
  duel_id: u128
  entity: World__Entity
  eventMessage: World__EventMessage
}

type pistols_PactConnection {
  edges: [pistols_PactEdge]
  totalCount: Int!
  pageInfo: World__PageInfo!
}

type pistols_PactEdge {
  node: pistols_Pact
  cursor: Cursor
}

input pistols_PactOrder {
  direction: OrderDirection!
  field: pistols_PactOrderField!
}

enum pistols_PactOrderField {
  TABLE_ID
  PAIR
  DUEL_ID
}

input pistols_PactWhereInput {
  table_id: felt252
  table_idGT: felt252
  table_idGTE: felt252
  table_idLT: felt252
  table_idLTE: felt252
  table_idNEQ: felt252
  table_idEQ: felt252
  table_idNOTIN: [felt252]
  table_idIN: [felt252]
  table_idNOTLIKE: felt252
  table_idLIKE: felt252
  pair: u128
  pairGT: u128
  pairGTE: u128
  pairLT: u128
  pairLTE: u128
  pairNEQ: u128
  pairEQ: u128
  pairNOTIN: [u128]
  pairIN: [u128]
  pairNOTLIKE: u128
  pairLIKE: u128
  duel_id: u128
  duel_idGT: u128
  duel_idGTE: u128
  duel_idLT: u128
  duel_idLTE: u128
  duel_idNEQ: u128
  duel_idEQ: u128
  duel_idNOTIN: [u128]
  duel_idIN: [u128]
  duel_idNOTLIKE: u128
  duel_idLIKE: u128
}

type pistols_Round {
  duel_id: u128
  round_number: u8
  moves_a: pistols_Round_Moves
  moves_b: pistols_Round_Moves
  state_a: pistols_Round_DuelistState
  state_b: pistols_Round_DuelistState
  state: Enum
  final_step: u8
  entity: World__Entity
  eventMessage: World__EventMessage
}

type pistols_RoundConnection {
  edges: [pistols_RoundEdge]
  totalCount: Int!
  pageInfo: World__PageInfo!
}

type pistols_RoundEdge {
  node: pistols_Round
  cursor: Cursor
}

input pistols_RoundOrder {
  direction: OrderDirection!
  field: pistols_RoundOrderField!
}

enum pistols_RoundOrderField {
  DUEL_ID
  ROUND_NUMBER
  MOVES_A
  MOVES_B
  STATE_A
  STATE_B
  STATE
  FINAL_STEP
}

input pistols_RoundWhereInput {
  duel_id: u128
  duel_idGT: u128
  duel_idGTE: u128
  duel_idLT: u128
  duel_idLTE: u128
  duel_idNEQ: u128
  duel_idEQ: u128
  duel_idNOTIN: [u128]
  duel_idIN: [u128]
  duel_idNOTLIKE: u128
  duel_idLIKE: u128
  round_number: u8
  round_numberGT: u8
  round_numberGTE: u8
  round_numberLT: u8
  round_numberLTE: u8
  round_numberNEQ: u8
  round_numberEQ: u8
  round_numberNOTIN: [u8]
  round_numberIN: [u8]
  round_numberNOTLIKE: u8
  round_numberLIKE: u8
  state: Enum
  final_step: u8
  final_stepGT: u8
  final_stepGTE: u8
  final_stepLT: u8
  final_stepLTE: u8
  final_stepNEQ: u8
  final_stepEQ: u8
  final_stepNOTIN: [u8]
  final_stepIN: [u8]
  final_stepNOTLIKE: u8
  final_stepLIKE: u8
}

type pistols_Round_DuelistState {
  chances: u8
  damage: u8
  health: u8
  dice_fire: u8
  honour: u8
  wager: u8
}

type pistols_Round_Moves {
  salt: felt252
  hashed: u128
  card_1: u8
  card_2: u8
  card_3: u8
  card_4: u8
}

type pistols_Scoreboard {
  table_id: felt252
  duelist_id: u128
  score: pistols_Scoreboard_Score
  wager_won: u128
  wager_lost: u128
  entity: World__Entity
  eventMessage: World__EventMessage
}

type pistols_ScoreboardConnection {
  edges: [pistols_ScoreboardEdge]
  totalCount: Int!
  pageInfo: World__PageInfo!
}

type pistols_ScoreboardEdge {
  node: pistols_Scoreboard
  cursor: Cursor
}

input pistols_ScoreboardOrder {
  direction: OrderDirection!
  field: pistols_ScoreboardOrderField!
}

enum pistols_ScoreboardOrderField {
  TABLE_ID
  DUELIST_ID
  SCORE
  WAGER_WON
  WAGER_LOST
}

input pistols_ScoreboardWhereInput {
  table_id: felt252
  table_idGT: felt252
  table_idGTE: felt252
  table_idLT: felt252
  table_idLTE: felt252
  table_idNEQ: felt252
  table_idEQ: felt252
  table_idNOTIN: [felt252]
  table_idIN: [felt252]
  table_idNOTLIKE: felt252
  table_idLIKE: felt252
  duelist_id: u128
  duelist_idGT: u128
  duelist_idGTE: u128
  duelist_idLT: u128
  duelist_idLTE: u128
  duelist_idNEQ: u128
  duelist_idEQ: u128
  duelist_idNOTIN: [u128]
  duelist_idIN: [u128]
  duelist_idNOTLIKE: u128
  duelist_idLIKE: u128
  wager_won: u128
  wager_wonGT: u128
  wager_wonGTE: u128
  wager_wonLT: u128
  wager_wonLTE: u128
  wager_wonNEQ: u128
  wager_wonEQ: u128
  wager_wonNOTIN: [u128]
  wager_wonIN: [u128]
  wager_wonNOTLIKE: u128
  wager_wonLIKE: u128
  wager_lost: u128
  wager_lostGT: u128
  wager_lostGTE: u128
  wager_lostLT: u128
  wager_lostLTE: u128
  wager_lostNEQ: u128
  wager_lostEQ: u128
  wager_lostNOTIN: [u128]
  wager_lostIN: [u128]
  wager_lostNOTLIKE: u128
  wager_lostLIKE: u128
}

type pistols_Scoreboard_Score {
  honour: u8
  level_villain: u8
  level_trickster: u8
  level_lord: u8
  total_duels: u16
  total_wins: u16
  total_losses: u16
  total_draws: u16
  honour_history: u64
}

type pistols_TableAdmittance {
  table_id: felt252
  accounts: [ContractAddress]
  duelists: [u128]
  entity: World__Entity
  eventMessage: World__EventMessage
}

type pistols_TableAdmittanceConnection {
  edges: [pistols_TableAdmittanceEdge]
  totalCount: Int!
  pageInfo: World__PageInfo!
}

type pistols_TableAdmittanceEdge {
  node: pistols_TableAdmittance
  cursor: Cursor
}

input pistols_TableAdmittanceOrder {
  direction: OrderDirection!
  field: pistols_TableAdmittanceOrderField!
}

enum pistols_TableAdmittanceOrderField {
  TABLE_ID
  ACCOUNTS
  DUELISTS
}

input pistols_TableAdmittanceWhereInput {
  table_id: felt252
  table_idGT: felt252
  table_idGTE: felt252
  table_idLT: felt252
  table_idLTE: felt252
  table_idNEQ: felt252
  table_idEQ: felt252
  table_idNOTIN: [felt252]
  table_idIN: [felt252]
  table_idNOTLIKE: felt252
  table_idLIKE: felt252
}

type pistols_TableConfig {
  table_id: felt252
  description: felt252
  table_type: Enum
  deck_type: Enum
  fee_contract_address: ContractAddress
  fee_collector_address: ContractAddress
  fee_min: u128
  is_open: bool
  entity: World__Entity
  eventMessage: World__EventMessage
}

type pistols_TableConfigConnection {
  edges: [pistols_TableConfigEdge]
  totalCount: Int!
  pageInfo: World__PageInfo!
}

type pistols_TableConfigEdge {
  node: pistols_TableConfig
  cursor: Cursor
}

input pistols_TableConfigOrder {
  direction: OrderDirection!
  field: pistols_TableConfigOrderField!
}

enum pistols_TableConfigOrderField {
  TABLE_ID
  DESCRIPTION
  TABLE_TYPE
  DECK_TYPE
  FEE_CONTRACT_ADDRESS
  FEE_COLLECTOR_ADDRESS
  FEE_MIN
  IS_OPEN
}

input pistols_TableConfigWhereInput {
  table_id: felt252
  table_idGT: felt252
  table_idGTE: felt252
  table_idLT: felt252
  table_idLTE: felt252
  table_idNEQ: felt252
  table_idEQ: felt252
  table_idNOTIN: [felt252]
  table_idIN: [felt252]
  table_idNOTLIKE: felt252
  table_idLIKE: felt252
  description: felt252
  descriptionGT: felt252
  descriptionGTE: felt252
  descriptionLT: felt252
  descriptionLTE: felt252
  descriptionNEQ: felt252
  descriptionEQ: felt252
  descriptionNOTIN: [felt252]
  descriptionIN: [felt252]
  descriptionNOTLIKE: felt252
  descriptionLIKE: felt252
  table_type: Enum
  deck_type: Enum
  fee_contract_address: ContractAddress
  fee_contract_addressGT: ContractAddress
  fee_contract_addressGTE: ContractAddress
  fee_contract_addressLT: ContractAddress
  fee_contract_addressLTE: ContractAddress
  fee_contract_addressNEQ: ContractAddress
  fee_contract_addressEQ: ContractAddress
  fee_contract_addressNOTIN: [ContractAddress]
  fee_contract_addressIN: [ContractAddress]
  fee_contract_addressNOTLIKE: ContractAddress
  fee_contract_addressLIKE: ContractAddress
  fee_collector_address: ContractAddress
  fee_collector_addressGT: ContractAddress
  fee_collector_addressGTE: ContractAddress
  fee_collector_addressLT: ContractAddress
  fee_collector_addressLTE: ContractAddress
  fee_collector_addressNEQ: ContractAddress
  fee_collector_addressEQ: ContractAddress
  fee_collector_addressNOTIN: [ContractAddress]
  fee_collector_addressIN: [ContractAddress]
  fee_collector_addressNOTLIKE: ContractAddress
  fee_collector_addressLIKE: ContractAddress
  fee_min: u128
  fee_minGT: u128
  fee_minGTE: u128
  fee_minLT: u128
  fee_minLTE: u128
  fee_minNEQ: u128
  fee_minEQ: u128
  fee_minNOTIN: [u128]
  fee_minIN: [u128]
  fee_minNOTLIKE: u128
  fee_minLIKE: u128
  is_open: bool
}

type pistols_TableWager {
  table_id: felt252
  wager_min: u128
  wager_max: u128
  fee_pct: u8
  entity: World__Entity
  eventMessage: World__EventMessage
}

type pistols_TableWagerConnection {
  edges: [pistols_TableWagerEdge]
  totalCount: Int!
  pageInfo: World__PageInfo!
}

type pistols_TableWagerEdge {
  node: pistols_TableWager
  cursor: Cursor
}

input pistols_TableWagerOrder {
  direction: OrderDirection!
  field: pistols_TableWagerOrderField!
}

enum pistols_TableWagerOrderField {
  TABLE_ID
  WAGER_MIN
  WAGER_MAX
  FEE_PCT
}

input pistols_TableWagerWhereInput {
  table_id: felt252
  table_idGT: felt252
  table_idGTE: felt252
  table_idLT: felt252
  table_idLTE: felt252
  table_idNEQ: felt252
  table_idEQ: felt252
  table_idNOTIN: [felt252]
  table_idIN: [felt252]
  table_idNOTLIKE: felt252
  table_idLIKE: felt252
  wager_min: u128
  wager_minGT: u128
  wager_minGTE: u128
  wager_minLT: u128
  wager_minLTE: u128
  wager_minNEQ: u128
  wager_minEQ: u128
  wager_minNOTIN: [u128]
  wager_minIN: [u128]
  wager_minNOTLIKE: u128
  wager_minLIKE: u128
  wager_max: u128
  wager_maxGT: u128
  wager_maxGTE: u128
  wager_maxLT: u128
  wager_maxLTE: u128
  wager_maxNEQ: u128
  wager_maxEQ: u128
  wager_maxNOTIN: [u128]
  wager_maxIN: [u128]
  wager_maxNOTLIKE: u128
  wager_maxLIKE: u128
  fee_pct: u8
  fee_pctGT: u8
  fee_pctGTE: u8
  fee_pctLT: u8
  fee_pctLTE: u8
  fee_pctNEQ: u8
  fee_pctEQ: u8
  fee_pctNOTIN: [u8]
  fee_pctIN: [u8]
  fee_pctNOTLIKE: u8
  fee_pctLIKE: u8
}

type pistols_TokenConfig {
  token_address: ContractAddress
  minter_address: ContractAddress
  renderer_address: ContractAddress
  treasury_address: ContractAddress
  fee_contract: ContractAddress
  fee_amount: u128
  minted_count: u128
  entity: World__Entity
  eventMessage: World__EventMessage
}

type pistols_TokenConfigConnection {
  edges: [pistols_TokenConfigEdge]
  totalCount: Int!
  pageInfo: World__PageInfo!
}

type pistols_TokenConfigEdge {
  node: pistols_TokenConfig
  cursor: Cursor
}

input pistols_TokenConfigOrder {
  direction: OrderDirection!
  field: pistols_TokenConfigOrderField!
}

enum pistols_TokenConfigOrderField {
  TOKEN_ADDRESS
  MINTER_ADDRESS
  RENDERER_ADDRESS
  TREASURY_ADDRESS
  FEE_CONTRACT
  FEE_AMOUNT
  MINTED_COUNT
}

input pistols_TokenConfigWhereInput {
  token_address: ContractAddress
  token_addressGT: ContractAddress
  token_addressGTE: ContractAddress
  token_addressLT: ContractAddress
  token_addressLTE: ContractAddress
  token_addressNEQ: ContractAddress
  token_addressEQ: ContractAddress
  token_addressNOTIN: [ContractAddress]
  token_addressIN: [ContractAddress]
  token_addressNOTLIKE: ContractAddress
  token_addressLIKE: ContractAddress
  minter_address: ContractAddress
  minter_addressGT: ContractAddress
  minter_addressGTE: ContractAddress
  minter_addressLT: ContractAddress
  minter_addressLTE: ContractAddress
  minter_addressNEQ: ContractAddress
  minter_addressEQ: ContractAddress
  minter_addressNOTIN: [ContractAddress]
  minter_addressIN: [ContractAddress]
  minter_addressNOTLIKE: ContractAddress
  minter_addressLIKE: ContractAddress
  renderer_address: ContractAddress
  renderer_addressGT: ContractAddress
  renderer_addressGTE: ContractAddress
  renderer_addressLT: ContractAddress
  renderer_addressLTE: ContractAddress
  renderer_addressNEQ: ContractAddress
  renderer_addressEQ: ContractAddress
  renderer_addressNOTIN: [ContractAddress]
  renderer_addressIN: [ContractAddress]
  renderer_addressNOTLIKE: ContractAddress
  renderer_addressLIKE: ContractAddress
  treasury_address: ContractAddress
  treasury_addressGT: ContractAddress
  treasury_addressGTE: ContractAddress
  treasury_addressLT: ContractAddress
  treasury_addressLTE: ContractAddress
  treasury_addressNEQ: ContractAddress
  treasury_addressEQ: ContractAddress
  treasury_addressNOTIN: [ContractAddress]
  treasury_addressIN: [ContractAddress]
  treasury_addressNOTLIKE: ContractAddress
  treasury_addressLIKE: ContractAddress
  fee_contract: ContractAddress
  fee_contractGT: ContractAddress
  fee_contractGTE: ContractAddress
  fee_contractLT: ContractAddress
  fee_contractLTE: ContractAddress
  fee_contractNEQ: ContractAddress
  fee_contractEQ: ContractAddress
  fee_contractNOTIN: [ContractAddress]
  fee_contractIN: [ContractAddress]
  fee_contractNOTLIKE: ContractAddress
  fee_contractLIKE: ContractAddress
  fee_amount: u128
  fee_amountGT: u128
  fee_amountGTE: u128
  fee_amountLT: u128
  fee_amountLTE: u128
  fee_amountNEQ: u128
  fee_amountEQ: u128
  fee_amountNOTIN: [u128]
  fee_amountIN: [u128]
  fee_amountNOTLIKE: u128
  fee_amountLIKE: u128
  minted_count: u128
  minted_countGT: u128
  minted_countGTE: u128
  minted_countLT: u128
  minted_countLTE: u128
  minted_countNEQ: u128
  minted_countEQ: u128
  minted_countNOTIN: [u128]
  minted_countIN: [u128]
  minted_countNOTLIKE: u128
  minted_countLIKE: u128
}

type pistols_Wager {
  duel_id: u128
  value: u128
  fee: u128
  entity: World__Entity
  eventMessage: World__EventMessage
}

type pistols_WagerConnection {
  edges: [pistols_WagerEdge]
  totalCount: Int!
  pageInfo: World__PageInfo!
}

type pistols_WagerEdge {
  node: pistols_Wager
  cursor: Cursor
}

input pistols_WagerOrder {
  direction: OrderDirection!
  field: pistols_WagerOrderField!
}

enum pistols_WagerOrderField {
  DUEL_ID
  VALUE
  FEE
}

input pistols_WagerWhereInput {
  duel_id: u128
  duel_idGT: u128
  duel_idGTE: u128
  duel_idLT: u128
  duel_idLTE: u128
  duel_idNEQ: u128
  duel_idEQ: u128
  duel_idNOTIN: [u128]
  duel_idIN: [u128]
  duel_idNOTLIKE: u128
  duel_idLIKE: u128
  value: u128
  valueGT: u128
  valueGTE: u128
  valueLT: u128
  valueLTE: u128
  valueNEQ: u128
  valueEQ: u128
  valueNOTIN: [u128]
  valueIN: [u128]
  valueNOTLIKE: u128
  valueLIKE: u128
  fee: u128
  feeGT: u128
  feeGTE: u128
  feeLT: u128
  feeLTE: u128
  feeNEQ: u128
  feeEQ: u128
  feeNOTIN: [u128]
  feeIN: [u128]
  feeNOTLIKE: u128
  feeLIKE: u128
}

scalar u128

scalar u16

scalar u64

scalar u8
