/* Autogenerated file. Do not edit manually. */

import { defineComponent, Type as RecsType, World } from "@dojoengine/recs";

export type ContractComponents = Awaited<ReturnType<typeof defineContractComponents>>;

export function defineContractComponents(world: World) {
  return {
    Challenge: (() => {
      return defineComponent(
        world,
        { duel_id: RecsType.BigInt, seed: RecsType.BigInt, table_id: RecsType.BigInt, premise: RecsType.Number, quote: RecsType.BigInt, address_a: RecsType.BigInt, address_b: RecsType.BigInt, duelist_id_a: RecsType.BigInt, duelist_id_b: RecsType.BigInt, state: RecsType.Number, winner: RecsType.Number, timestamp_start: RecsType.BigInt, timestamp_end: RecsType.BigInt },
        {
          metadata: {
            namespace: "pistols",
            name: "Challenge",
            types: ["u128","u128","felt252","enum","felt252","contractaddress","contractaddress","u128","u128","enum","u8","u64","u64"],
            customTypes: ["Premise","ChallengeState"],
          },
        }
      );
    })(),
    CoinConfig: (() => {
      return defineComponent(
        world,
        { coin_address: RecsType.BigInt, minter_address: RecsType.BigInt, faucet_amount: RecsType.BigInt },
        {
          metadata: {
            namespace: "pistols",
            name: "CoinConfig",
            types: ["contractaddress","contractaddress","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    Config: (() => {
      return defineComponent(
        world,
        { key: RecsType.Number, treasury_address: RecsType.BigInt, lords_address: RecsType.BigInt, is_paused: RecsType.Boolean },
        {
          metadata: {
            namespace: "pistols",
            name: "Config",
            types: ["u8","contractaddress","contractaddress","bool"],
            customTypes: [],
          },
        }
      );
    })(),
    Duelist: (() => {
      return defineComponent(
        world,
        { duelist_id: RecsType.BigInt, name: RecsType.BigInt, profile_pic_type: RecsType.Number, profile_pic_uri: RecsType.String, timestamp: RecsType.BigInt, score: { honour: RecsType.Number, total_duels: RecsType.Number, total_wins: RecsType.Number, total_losses: RecsType.Number, total_draws: RecsType.Number, honour_history: RecsType.BigInt } },
        {
          metadata: {
            namespace: "pistols",
            name: "Duelist",
            types: ["u128","felt252","enum","u64","u8","u16","u16","u16","u16","u64"],
            customTypes: ["ProfilePicType","Score"],
          },
        }
      );
    })(),
    Pact: (() => {
      return defineComponent(
        world,
        { table_id: RecsType.BigInt, pair: RecsType.BigInt, duel_id: RecsType.BigInt },
        {
          metadata: {
            namespace: "pistols",
            name: "Pact",
            types: ["felt252","u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    Payment: (() => {
      return defineComponent(
        world,
        { key: RecsType.BigInt, amount: RecsType.BigInt, client_percent: RecsType.Number, ranking_percent: RecsType.Number, owner_percent: RecsType.Number, pool_percent: RecsType.Number, treasury_percent: RecsType.Number },
        {
          metadata: {
            namespace: "pistols",
            name: "Payment",
            types: ["felt252","u256","u8","u8","u8","u8","u8"],
            customTypes: [],
          },
        }
      );
    })(),
    Round: (() => {
      return defineComponent(
        world,
        { duel_id: RecsType.BigInt, moves_a: { salt: RecsType.BigInt, hashed: RecsType.BigInt, card_1: RecsType.Number, card_2: RecsType.Number, card_3: RecsType.Number, card_4: RecsType.Number }, moves_b: { salt: RecsType.BigInt, hashed: RecsType.BigInt, card_1: RecsType.Number, card_2: RecsType.Number, card_3: RecsType.Number, card_4: RecsType.Number }, state_a: { chances: RecsType.Number, damage: RecsType.Number, health: RecsType.Number, dice_fire: RecsType.Number, honour: RecsType.Number }, state_b: { chances: RecsType.Number, damage: RecsType.Number, health: RecsType.Number, dice_fire: RecsType.Number, honour: RecsType.Number }, state: RecsType.Number, final_blow: RecsType.BigInt },
        {
          metadata: {
            namespace: "pistols",
            name: "Round",
            types: ["u128","felt252","u128","u8","u8","u8","u8","felt252","u128","u8","u8","u8","u8","u8","u8","u8","u8","u8","u8","u8","u8","u8","u8","enum","felt252"],
            customTypes: ["Moves","Moves","DuelistState","DuelistState","RoundState"],
          },
        }
      );
    })(),
    Scoreboard: (() => {
      return defineComponent(
        world,
        { table_id: RecsType.BigInt, duelist_id: RecsType.BigInt, score: { honour: RecsType.Number, total_duels: RecsType.Number, total_wins: RecsType.Number, total_losses: RecsType.Number, total_draws: RecsType.Number, honour_history: RecsType.BigInt } },
        {
          metadata: {
            namespace: "pistols",
            name: "Scoreboard",
            types: ["felt252","u128","u8","u16","u16","u16","u16","u64"],
            customTypes: ["Score"],
          },
        }
      );
    })(),
    TableAdmittance: (() => {
      return defineComponent(
        world,
        { table_id: RecsType.BigInt, accounts: RecsType.StringArray, duelists: RecsType.StringArray },
        {
          metadata: {
            namespace: "pistols",
            name: "TableAdmittance",
            types: ["felt252"],
            customTypes: [],
          },
        }
      );
    })(),
    TableConfig: (() => {
      return defineComponent(
        world,
        { table_id: RecsType.BigInt, description: RecsType.BigInt, table_type: RecsType.Number, deck_type: RecsType.Number, fee_collector_address: RecsType.BigInt, fee_min: RecsType.BigInt, is_open: RecsType.Boolean },
        {
          metadata: {
            namespace: "pistols",
            name: "TableConfig",
            types: ["felt252","felt252","enum","enum","contractaddress","u128","bool"],
            customTypes: ["TableType","DeckType"],
          },
        }
      );
    })(),
    TokenBoundAddress: (() => {
      return defineComponent(
        world,
        { recipient: RecsType.BigInt, contract_address: RecsType.BigInt, token_id: RecsType.BigInt },
        {
          metadata: {
            namespace: "pistols",
            name: "TokenBoundAddress",
            types: ["contractaddress","contractaddress","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    TokenConfig: (() => {
      return defineComponent(
        world,
        { token_address: RecsType.BigInt, minter_address: RecsType.BigInt, renderer_address: RecsType.BigInt, minted_count: RecsType.BigInt },
        {
          metadata: {
            namespace: "pistols",
            name: "TokenConfig",
            types: ["contractaddress","contractaddress","contractaddress","u128"],
            customTypes: [],
          },
        }
      );
    })(),
  };
}
