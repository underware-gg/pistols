/* Autogenerated file. Do not edit manually. */

import { defineComponent, Type as RecsType, World } from "@dojoengine/recs";

export type ContractComponents = Awaited<ReturnType<typeof defineContractComponents>>;

export function defineContractComponents(world: World) {
  return {
    ERC20AllowanceModel: (() => {
      return defineComponent(
        world,
        { token: RecsType.BigInt, owner: RecsType.BigInt, spender: RecsType.BigInt, amount: RecsType.BigInt },
        {
          metadata: {
            namespace: "origami_token",
            name: "ERC20AllowanceModel",
            types: ["contractaddress","contractaddress","contractaddress","u256"],
            customTypes: [],
          },
        }
      );
    })(),
    ERC20BalanceModel: (() => {
      return defineComponent(
        world,
        { token: RecsType.BigInt, account: RecsType.BigInt, amount: RecsType.BigInt },
        {
          metadata: {
            namespace: "origami_token",
            name: "ERC20BalanceModel",
            types: ["contractaddress","contractaddress","u256"],
            customTypes: [],
          },
        }
      );
    })(),
    ERC20BridgeableModel: (() => {
      return defineComponent(
        world,
        { token: RecsType.BigInt, l2_bridge_address: RecsType.BigInt },
        {
          metadata: {
            namespace: "origami_token",
            name: "ERC20BridgeableModel",
            types: ["contractaddress","contractaddress"],
            customTypes: [],
          },
        }
      );
    })(),
    ERC20MetadataModel: (() => {
      return defineComponent(
        world,
        { token: RecsType.BigInt, name: RecsType.String, symbol: RecsType.String, decimals: RecsType.Number, total_supply: RecsType.BigInt },
        {
          metadata: {
            namespace: "origami_token",
            name: "ERC20MetadataModel",
            types: ["contractaddress","u8","u256"],
            customTypes: [],
          },
        }
      );
    })(),
    ERC721BalanceModel: (() => {
      return defineComponent(
        world,
        { token: RecsType.BigInt, account: RecsType.BigInt, amount: RecsType.BigInt },
        {
          metadata: {
            namespace: "origami_token",
            name: "ERC721BalanceModel",
            types: ["contractaddress","contractaddress","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    ERC721EnumerableIndexModel: (() => {
      return defineComponent(
        world,
        { token: RecsType.BigInt, index: RecsType.BigInt, token_id: RecsType.BigInt },
        {
          metadata: {
            namespace: "origami_token",
            name: "ERC721EnumerableIndexModel",
            types: ["contractaddress","u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    ERC721EnumerableOwnerIndexModel: (() => {
      return defineComponent(
        world,
        { token: RecsType.BigInt, owner: RecsType.BigInt, index: RecsType.BigInt, token_id: RecsType.BigInt },
        {
          metadata: {
            namespace: "origami_token",
            name: "ERC721EnumerableOwnerIndexModel",
            types: ["contractaddress","contractaddress","u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    ERC721EnumerableOwnerTokenModel: (() => {
      return defineComponent(
        world,
        { token: RecsType.BigInt, owner: RecsType.BigInt, token_id: RecsType.BigInt, index: RecsType.BigInt },
        {
          metadata: {
            namespace: "origami_token",
            name: "ERC721EnumerableOwnerTokenModel",
            types: ["contractaddress","contractaddress","u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    ERC721EnumerableTokenModel: (() => {
      return defineComponent(
        world,
        { token: RecsType.BigInt, token_id: RecsType.BigInt, index: RecsType.BigInt },
        {
          metadata: {
            namespace: "origami_token",
            name: "ERC721EnumerableTokenModel",
            types: ["contractaddress","u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    ERC721EnumerableTotalModel: (() => {
      return defineComponent(
        world,
        { token: RecsType.BigInt, total_supply: RecsType.BigInt },
        {
          metadata: {
            namespace: "origami_token",
            name: "ERC721EnumerableTotalModel",
            types: ["contractaddress","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    ERC721MetaModel: (() => {
      return defineComponent(
        world,
        { token: RecsType.BigInt, name: RecsType.String, symbol: RecsType.String, base_uri: RecsType.String },
        {
          metadata: {
            namespace: "origami_token",
            name: "ERC721MetaModel",
            types: ["contractaddress"],
            customTypes: [],
          },
        }
      );
    })(),
    ERC721OperatorApprovalModel: (() => {
      return defineComponent(
        world,
        { token: RecsType.BigInt, owner: RecsType.BigInt, operator: RecsType.BigInt, approved: RecsType.Boolean },
        {
          metadata: {
            namespace: "origami_token",
            name: "ERC721OperatorApprovalModel",
            types: ["contractaddress","contractaddress","contractaddress","bool"],
            customTypes: [],
          },
        }
      );
    })(),
    ERC721OwnerModel: (() => {
      return defineComponent(
        world,
        { token: RecsType.BigInt, token_id: RecsType.BigInt, address: RecsType.BigInt },
        {
          metadata: {
            namespace: "origami_token",
            name: "ERC721OwnerModel",
            types: ["contractaddress","u128","contractaddress"],
            customTypes: [],
          },
        }
      );
    })(),
    ERC721TokenApprovalModel: (() => {
      return defineComponent(
        world,
        { token: RecsType.BigInt, token_id: RecsType.BigInt, address: RecsType.BigInt },
        {
          metadata: {
            namespace: "origami_token",
            name: "ERC721TokenApprovalModel",
            types: ["contractaddress","u128","contractaddress"],
            customTypes: [],
          },
        }
      );
    })(),
    InitializableModel: (() => {
      return defineComponent(
        world,
        { token: RecsType.BigInt, initialized: RecsType.Boolean },
        {
          metadata: {
            namespace: "origami_token",
            name: "InitializableModel",
            types: ["contractaddress","bool"],
            customTypes: [],
          },
        }
      );
    })(),
    SRC5Model: (() => {
      return defineComponent(
        world,
        { token: RecsType.BigInt, interface_id: RecsType.BigInt, supports: RecsType.Boolean },
        {
          metadata: {
            namespace: "origami_token",
            name: "SRC5Model",
            types: ["contractaddress","felt252","bool"],
            customTypes: [],
          },
        }
      );
    })(),
    Challenge: (() => {
      return defineComponent(
        world,
        { duel_id: RecsType.BigInt, table_id: RecsType.BigInt, premise: RecsType.Number, quote: RecsType.BigInt, address_a: RecsType.BigInt, address_b: RecsType.BigInt, duelist_id_a: RecsType.BigInt, duelist_id_b: RecsType.BigInt, state: RecsType.Number, round_number: RecsType.Number, winner: RecsType.Number, timestamp_start: RecsType.BigInt, timestamp_end: RecsType.BigInt },
        {
          metadata: {
            namespace: "pistols",
            name: "Challenge",
            types: ["u128","felt252","enum","felt252","contractaddress","contractaddress","u128","u128","enum","u8","u8","u64","u64"],
            customTypes: ["Premise","ChallengeState"],
          },
        }
      );
    })(),
    Config: (() => {
      return defineComponent(
        world,
        { key: RecsType.Number, treasury_address: RecsType.BigInt, is_paused: RecsType.Boolean },
        {
          metadata: {
            namespace: "pistols",
            name: "Config",
            types: ["u8","contractaddress","bool"],
            customTypes: [],
          },
        }
      );
    })(),
    Duelist: (() => {
      return defineComponent(
        world,
        { duelist_id: RecsType.BigInt, name: RecsType.BigInt, profile_pic_uri: RecsType.String, profile_pic_type: RecsType.Number, timestamp: RecsType.BigInt, score: { honour: RecsType.Number, level_villain: RecsType.Number, level_trickster: RecsType.Number, level_lord: RecsType.Number, total_duels: RecsType.Number, total_wins: RecsType.Number, total_losses: RecsType.Number, total_draws: RecsType.Number, honour_history: RecsType.BigInt } },
        {
          metadata: {
            namespace: "pistols",
            name: "Duelist",
            types: ["u128","felt252","enum","u64","u8","u8","u8","u8","u16","u16","u16","u16","u64"],
            customTypes: ["ProfilePicType","Score"],
          },
        }
      );
    })(),
    Pact: (() => {
      return defineComponent(
        world,
        { table_id: RecsType.BigInt, pair: RecsType.BigInt, duel_id: RecsType.BigInt },
        {
          metadata: {
            namespace: "pistols",
            name: "Pact",
            types: ["felt252","u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    Round: (() => {
      return defineComponent(
        world,
        { duel_id: RecsType.BigInt, round_number: RecsType.Number, moves_a: { salt: RecsType.BigInt, hashed: RecsType.BigInt, card_1: RecsType.Number, card_2: RecsType.Number, card_3: RecsType.Number, card_4: RecsType.Number }, moves_b: { salt: RecsType.BigInt, hashed: RecsType.BigInt, card_1: RecsType.Number, card_2: RecsType.Number, card_3: RecsType.Number, card_4: RecsType.Number }, state_a: { chances: RecsType.Number, damage: RecsType.Number, health: RecsType.Number, dice_fire: RecsType.Number, honour: RecsType.Number, wager: RecsType.Number }, state_b: { chances: RecsType.Number, damage: RecsType.Number, health: RecsType.Number, dice_fire: RecsType.Number, honour: RecsType.Number, wager: RecsType.Number }, state: RecsType.Number, final_step: RecsType.Number },
        {
          metadata: {
            namespace: "pistols",
            name: "Round",
            types: ["u128","u8","felt252","u128","u8","u8","u8","u8","felt252","u128","u8","u8","u8","u8","u8","u8","u8","u8","u8","u8","u8","u8","u8","u8","u8","u8","enum","u8"],
            customTypes: ["Moves","Moves","DuelistState","DuelistState","RoundState"],
          },
        }
      );
    })(),
    Scoreboard: (() => {
      return defineComponent(
        world,
        { table_id: RecsType.BigInt, duelist_id: RecsType.BigInt, score: { honour: RecsType.Number, level_villain: RecsType.Number, level_trickster: RecsType.Number, level_lord: RecsType.Number, total_duels: RecsType.Number, total_wins: RecsType.Number, total_losses: RecsType.Number, total_draws: RecsType.Number, honour_history: RecsType.BigInt }, wager_won: RecsType.BigInt, wager_lost: RecsType.BigInt },
        {
          metadata: {
            namespace: "pistols",
            name: "Scoreboard",
            types: ["felt252","u128","u8","u8","u8","u8","u16","u16","u16","u16","u64","u128","u128"],
            customTypes: ["Score"],
          },
        }
      );
    })(),
    TableAdmittance: (() => {
      return defineComponent(
        world,
        { table_id: RecsType.BigInt, accounts: RecsType.StringArray, duelists: RecsType.StringArray },
        {
          metadata: {
            namespace: "pistols",
            name: "TableAdmittance",
            types: ["felt252"],
            customTypes: [],
          },
        }
      );
    })(),
    TableConfig: (() => {
      return defineComponent(
        world,
        { table_id: RecsType.BigInt, description: RecsType.BigInt, table_type: RecsType.Number, deck_type: RecsType.Number, fee_contract_address: RecsType.BigInt, fee_collector_address: RecsType.BigInt, fee_min: RecsType.BigInt, is_open: RecsType.Boolean },
        {
          metadata: {
            namespace: "pistols",
            name: "TableConfig",
            types: ["felt252","felt252","enum","enum","contractaddress","contractaddress","u128","bool"],
            customTypes: ["TableType","DeckType"],
          },
        }
      );
    })(),
    TableWager: (() => {
      return defineComponent(
        world,
        { table_id: RecsType.BigInt, wager_min: RecsType.BigInt, wager_max: RecsType.BigInt, fee_pct: RecsType.Number },
        {
          metadata: {
            namespace: "pistols",
            name: "TableWager",
            types: ["felt252","u128","u128","u8"],
            customTypes: [],
          },
        }
      );
    })(),
    TokenConfig: (() => {
      return defineComponent(
        world,
        { token_address: RecsType.BigInt, minter_contract: RecsType.BigInt, renderer_contract: RecsType.BigInt, treasury_contract: RecsType.BigInt, fee_contract: RecsType.BigInt, fee_amount: RecsType.BigInt },
        {
          metadata: {
            namespace: "pistols",
            name: "TokenConfig",
            types: ["contractaddress","contractaddress","contractaddress","contractaddress","contractaddress","u128"],
            customTypes: [],
          },
        }
      );
    })(),
    Wager: (() => {
      return defineComponent(
        world,
        { duel_id: RecsType.BigInt, value: RecsType.BigInt, fee: RecsType.BigInt },
        {
          metadata: {
            namespace: "pistols",
            name: "Wager",
            types: ["u128","u128","u128"],
            customTypes: [],
          },
        }
      );
    })(),
  };
}
